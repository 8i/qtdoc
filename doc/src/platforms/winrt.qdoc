/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page winrt_support.html
    \title WinRT
    \brief Provides insight into Qt's WinRT port and how to use it.

    Microsoft introduced a new design paradigm with the Windows 8 Modern UI. A
    core part of this new approach is Windows Runtime (WinRT) that supports
    development using different programming languages, such as C++/CX (component
    extensions), C# VB.NET, or JavaScript. The Qt port uses the C++
    capabilities. While WinRT supports the component extensions internally, they
    are not used inside Qt and you do not need to use them. WinRT applications
    run in a sandboxed environment for security reasons and support different
    architectures, such as ARM and x86.

    Qt's WinRT port supports the following:

    \list
        \li Widgets
        \li Graphics view
        \li Touch and orientation events
    \endlist

    \section1 Getting Started

    Qt for WinRT is always built as a cross-build, because tools, such as qmake,
    are built as desktop applications. It also does not really make a difference
    whether you target a desktop computer or a phone, except that you
    have to configure Qt using the correct \c xplatform.
    The WinRT mkspec format is \c {<platform>-<architecture>-<toolchain>}
    where \e platform can be \c winrt or \c winphone and architecture can be
    \c arm, \c x86, or \c x64. The following is an example of building qtbase
    for WinRT:
    \code
        > ./configure -xplatform winrt-x64-msvc2012 -developer-build -release
        > nmake/jom
    \endcode

    To use the latest sources, check out the \c dev branch before building.

    \section1 Building Applications

    You can develop applications for WinRT just as any other Qt applications.
    Use your favorite editor or IDE (such as Qt Creator) and create your
    application or load a Qt example. Then run \c qmake and \c {nmake/jom} to
    build your application.

    \section1 Running Applications

    Unfortunately, running WinRT applications is not as easy, yet. Applications
    can only be started as part of an application package or by registering them
    internally. The easiest way of registering your application
    is to copy its content to a dedicated directory. The package content
    consists of the application executable and its dependencies, as for every
    other non-WinRT Windows application. The dependencies are the needed (Qt)
    libraries and plugins. Note that Qt plugins have to be put into a folder
    named after their category (platforms, imageformats, and so on) without
    using a \c plugins folder as root. For more information, see
    \l{Deploying an Application on Windows}.

    As WinRT applications are run in a sandboxed environment, setting
    the path variable to point to the files required will not work.

    The \c deployqt convenience tool looks up the application's dependencies and
    copies Qt libraries and plugins to the appropriate directories, as
    necessary.

    Because all resources are placed to one directory, you can register the
    directory using an XML file (AppxManifest.xml) and Windows Powershell. In
    PowerShell, change into your \e packaged directory and call:
    \code
        > Add-AppxPackage -Register AppxManifest.xml
    \endcode

    If that worked, you should be able to find your application in Windows 8's
    start screen. To remove your application, use Windows' built-in way to
    uninstall applications (right-click or tap and hold the application and
    choose \c{Uninstall}).
*/
