/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \group platform-specific
    \title Platform-Specific Documentation
    \brief Documents describing platform-specific features of Qt.

    These documents describe platform-specific features provided by Qt, and
    discuss issues related to particular platforms and environments.

    \generatelist{related}
*/

/*!
    \page platform-notes.html
    \ingroup platform-specific
    \title Platform and Compiler Notes
    \brief Information about the platforms on which Qt can be used.

    This page contains information about the platforms Qt is currently known
    to run on, with links to platform-specific notes, including any known bugs
    or incompatibilities.

    Information about the combinations of platforms and compilers
    supported by Qt can be found on the \l{Supported Platforms} page.

    \list
    \li \l{Platform and Compiler Notes - X11}
    \tableofcontents{1 Platform and Compiler Notes - X11}
    \li \l{Platform and Compiler Notes - Windows}
    \tableofcontents{1 Platform and Compiler Notes - Windows}
    \li \l{Platform and Compiler Notes - Mac OS X}
    \tableofcontents{1 Platform and Compiler Notes - Mac OS X}
    \li \l{Platform and Compiler Notes - Embedded Linux}
    \tableofcontents{1 Platform and Compiler Notes - Embedded Linux}
    \li \l{Platform and Compiler Notes - Windows CE}
    \tableofcontents{1 Platform and Compiler Notes - Windows CE}
    \li \l{Platform and Compiler Notes - QNX}
    \tableofcontents{1 Platform and Compiler Notes - QNX}
    \li \l{Platform and Compiler Notes - VxWorks}
    \tableofcontents{1 Platform and Compiler Notes - VxWorks}
    \endlist

    \section1 General Compiler Notes

    \section2 Supported Features

    Not all compilers used to build Qt are able to compile all modules. The following table
    shows the compiler support for five modules that are not uniformly available for all
    platforms and compilers.

    \table
    \header \li Compiler \li{5,1} Features
    \header \li                  \li Concurrent \li XmlPatterns \li WebKit(*)   \li CLucene
    \row    \li g++ 3.3          \li            \li \b{X}    \li          \li \b{X}
    \row    \li g++ 3.4 and up   \li \b{X}   \li \b{X}    \li \b{X} \li \b{X}
    \row    \li SunCC 5.5        \li            \li             \li          \li \b{X}
    \row    \li aCC series 3     \li            \li             \li          \li \b{X}
    \row    \li aCC series 6     \li \b{X}   \li \b{X}    \li \b{X} \li \b{X}
    \row    \li xlC 6            \li            \li             \li          \li \b{X}
    \row    \li Intel CC 10      \li \b{X}   \li \b{X}    \li \b{X} \li \b{X}
    \row    \li MSVC 2003        \li \b{X}   \li \b{X}    \li          \li \b{X}
    \row    \li MSVC 2005 and up \li \b{X}   \li \b{X}    \li \b{X} \li \b{X}
    \endtable

    * WebKit is only supported as a dynamically built library. Static linkage is not supported.

    \section2 GCC 3.4.6 (Debian 3.4.6-5) on AMD64 (x86_64)

    This compiler is known to miscompile some parts of Qt when doing a
    release build. There are several workarounds:

    \list 1
    \li Use a debug build instead.
    \li For each miscompilation encountered, recompile the file, removing the \c{-O2} option.
    \li Add \c{-fno-gcse} to the
       \l{qmake Variable Reference#QMAKE_CXXFLAGS_RELEASE}{QMAKE_CXXFLAGS_RELEASE} qmake
       variable.
    \endlist

    \section2 GCC 4.0.0

    The released package of the compiler has some bugs that lead to
    miscompilations.  We recommend using GCC 4.0.1 or later, or to use
    a recent CVS snapshot of the GCC 4.0 branch. The version of GCC
    4.0.0 that is shipped with Mac OS X 10.4 "Tiger" is known to work
    with Qt for Mac OS X.

    \section2 Intel C++ Compiler

    Qt supports the Intel C++ compiler on both Windows and Linux.
    However, there are a few issues on Linux; see
    \l{Platform and Compiler Notes - X11#Intel C++ Compiler for Linux}{Intel C++ Compiler for Linux}
    for details.

    \section1 Feedback and Corrections

    If you have anything to add to this list or any of the platform or
    compiler-specific pages, please submit it via the \l{Qt Bug Tracker}
    or through the \l{Public Qt Repository}.
*/

/*!
    \page platform-notes-x11.html
    \title Platform and Compiler Notes - X11
    \contentspage Platform and Compiler Notes

    This page contains information about the X11 platforms Qt is currently
    known to run on, with links to platform-specific notes. More information
    about the combinations of platforms and compilers supported by Qt can be
    found on the \l{Supported Platforms} page.

    \tableofcontents

    \target AIX
    \section1 AIX - 5.2

    Qt has been tested on AIX 5.2, using the xlC compiler.

    \table
    \header \li Compiler \li Notes
    \row    \li xlC
    \li If Qt is built correctly but all symbols are reported to be missing
    when you link an application, your makeC++SharedLib script might be out
    of date. Make sure you have the latest version from the
    \l{http://www-306.ibm.com/software/awdtools/vacpp/support/}{IBM website}.
    \row    \li GCC
    \li We have tested earlier versions of Qt 4 successfully with GCC version
    3.3 and above. Some versions of GCC may fail to link Qt with a "TOC overflow"
    message.
    Fix this by upgrading to the latest maintenance release of the dynamic
    linker. On AIX this is bos.rte.bind_cmds.4.1.5.3 or later.
    Some versions of GCC may fail to build Qt with STL and large-file support
    enabled, due to
    \l{http://gcc.gnu.org/bugzilla/show_bug.cgi?id=9551}{a bug in GCC}.
    Fix this by upgrading to the latest maintenance release of the compiler.
    It is also possible to work around this problem by running configure with
    either \c{-no-stl} or \c{-no-largefile}.
    \endtable

    \section2 IBM xlC

    The makeC++SharedLib utility must be in your PATH and be up to date to
    build shared libraries. From IBM's
    \l{http://www.redbooks.ibm.com/abstracts/sg245674.html}{C and C++ Application Development on AIX}
    Redbook:

    \list
    \li "The second step is to use the makeC++SharedLib command to create the
       shared object. The command has many optional arguments, but in its
       simplest form, can be used as follows:"
       \snippet doc/src/snippets/code/doc_src_compiler-notes.qdoc 1
    \li "The full path name to the command is not required; however, to avoid
       this, you will have to add the directory in which it is located to
       your PATH environment variable. The command is located in the
       /usr/vacpp/bin directory with the VisualAge C++ Professional for AIX,
       Version 5 compiler."
    \endlist

    \section2 VisualAge C++ for AIX, Version 6.0

    Make sure you have the
    \l{http://www-1.ibm.com/support/search.wss?rs=32&amp;tc=SSEP5D&amp;dc=D400}{latest upgrades}
    installed.

    \target FreeBSD
    \section1 FreeBSD - 6.0-RELEASE

    \note FreeBSD is a community supported platform. See the
    \l{Supported Platforms} page for more information.

    The system compiler on FreeBSD 4.x is GCC 2.95.4, which is not
    officially supported by Qt 4. We develop using and recommend
    ports/lang/gcc34. You will need to run configure with the
    \c{-platform freebsd-g++34} arguments. Optionally, you may use
    ports/lang/icc.

    The system compiler on FreeBSD 5.x and 6.x is GCC 3.4.4, which should be
    sufficient to build Qt. You do not need to add any special arguments when
    running configure. Optionally, you may use ports/lang/icc.

    Note that we do not actively test FreeBSD 4.x and 5.x. Our developers
    migrated to 6.x after the Qt 4 launch. FreeBSD-CURRENT is not supported.

    \section1 HP-UX

    Qt supports HP-UX on both PA-RISC and the Itanium (IA64) architectures.

    \section2 PA-RISC - B.11.11 or later

    You can configure Qt for aCC in 32 and 64 bit mode (hpux-acc-64 or
    hpux-acc-32), or GCC in 32 bit mode (hpux-g++).  The default platform is
    hpux-acc-32. The minimum required version for aCC (HP ANSI C++) on PA-RISC
    is A.03.57. The supported GCC compiler is GCC 3.4.3.

    \section2 Itanium - B.11.23 or later

    You can configure Qt for aCC in 32 and 64 bit mode (hpuxi-acc-64 or
    hpuxi-acc-32). GCC is currently unsupported.  The default platform is
    hpuxi-acc-64. The minimum required version for aCC (HP ANSI C++) on
    Itanium is A.06.12.

    \section2 HP ANSI C++ (aCC)

    The hpux-acc-32 and hpux-acc-64 platforms are tested with aCC A.03.57. The
    hpuxi-acc-32 and hpuxi-acc-64 platforms are tested with aCC A.06.10.

    \section2 GCC

    The hpux-g++ platform is tested with GCC 3.4.4.

    \section2 OpenGL Support

    Qt's \l{QtOpenGL}{OpenGL} module requires GLX 1.3 or later to be installed.
    This is available for HP-UX 11i - see the
    \l{http://docs.hp.com/en/5992-2331/ch04s02.html}{Graphics and Technical Computing Software}
    section of the release notes for more information.

    \target IRIX
    \section1 IRIX - 6.5.x

    \b{IRIX is an unsupported platform. See the \l{Supported Platforms} page
    and Qt's Software's online \l{Platform Support Policy} page for details.}

    Unpackaging and IRIX tar:
    Because of long filenames some files will be cut off incorrectly with IRIX
    tar. Please use GNU tar to unpack Qt packages.

    \section2 MIPSpro

    Qt 4.4.x requires MIPSpro version 7.4.2m.

    Note that MIPSpro version 7.4.4m is currently not supported, since it has
    introduced a number of problems that have not yet been resolved.
    We recommend using 7.4.2m for Qt development. However, please note the
    unsupported status of this platform.

    \section1 Linux

    There are no known problems with using Qt on production versions of
    Linux/x86, Linux/ppc, Linux/amd64 and Linux/ia64 (including Altix(R)).

    For the GCC compiler, please also see the relevant
    \l{Platform and Compiler Notes#General Compiler Notes}{General Compiler Notes}.

    \section2 Installation problems

    See also the \l{Installation FAQ}.

    If you experience problems when installing new open source versions of Qt
    versions, try to use the open source Qt archives (e.g., RPM)
    provided by your Linux distribution. If you need to install the source (.tgz)
    archive, be aware that you will probably end up with two different
    versions of the Qt library installed on your system, which will probably
    lead to link errors, like this:
    \snippet doc/src/snippets/code/doc_src_platform-notes.qdoc 0
    Fix this by removing the old version of the library.

    If you have problems installing open source versions of Qt
    provided by your Linux distribution (e.g., RPM), please consult the
    maintainers of the distribution, not us.

    Some RPM versions have problems installing some of the Qt RPM archives
    where installation stops with an error message warning about a
    "Failed Dependency". Use the \c{--nodeps} option to \c rpm to workaround
    this problem.

    \section2 Intel C++ Compiler for Linux

    Nokia currently tests the following compilers:

    \list

    \li Intel(R) C++ Compiler for applications running on IA-32,
    Version 10.1 Build 20080602 Package ID: l_cc_p_10.1.017

    \li Intel(R) C++ Compiler for applications running on Intel(R) 64,
    Version 10.1 Build 20080602 Package ID: l_cc_p_10.1.017

    \endlist

    We do not currently test the IA-64 (Itanium) compiler.

    \section2 Known Issues with Intel C++ Compiler for Linux

    \list

    \li Precompiled header support does not work in version 10.0.025
       and older. For these compilers, you should configure Qt with
       -no-pch. Precompiled header support works properly in version
       10.0.026 and later.
    \li Version 10.0.026 for Intel 64 is known to miscompile qmake when
       building in release mode. For now, configure Qt with
       -debug. Version 10.1.008 and later can compile qmake in release
       mode.
    \li Versions 10.1.008 to 10.1.015 for both IA-32 and Intel 64 are
       known crash with "(0): internal error: 0_47021" when compiling
       QtXmlPatterns, QtWebKit, and Designer in release mode. Version
       10.1.017 compiles these modules correctly in release mode.
    \endlist

    \target Solaris
    \section1 Solaris - 9 or later

    \section2 Unpackaging and Solaris tar

    On some Solaris systems, both Solaris tar and GNU tar have been reported
    to truncate long filenames. We recommend using star instead
    (http://star.berlios.de).

    Please note that WebKit is not supported for Solaris, regardless of
    which compiler is used.

    \section2 CC

    See the notes for \l{Forte Developer / Sun Studio}.

    \section2 GCC

    Please use GCC 3.4.2 or later.

    Do not use GCC with Sun's assembler/linker, this will result in link-time
    errors in shared libraries. Use GNU binutils instead. 

    GCC 3.2.* is known to miscompile Qt due to an optimizer bug that will
    cause the resulting binaries to hang.

    \section2 Forte Developer / Sun Studio

    Qt is tested using Sun Studio 12 (Sun CC 5.9). Go to
    \l{Sun Studio Patches} page on Sun's Web site to download
    the latest patches for your Sun compiler.

    Please note that Qt 4.6 is stricter in its STL requirements and
    that the default STL implementation used by Sun CC does not pass
    those requirements. This does not affect binary compatibility and
    you can continue to use STL in your own code, but Qt's
    STL-compatibility functions will be disabled.

    Sun CC ships with a secondary STL implementation (called stlport4)
    which is standards-compliant and can be used by Qt. You can enable
    it by passing the -library=stlport4 option to the compiler. Note
    that this does not affect Qt's binary compatibility, but it may
    affect that of other libraries and programs that use STL.

    \section2 Sun WorkShop 5.0

    Sun WorkShop 5.0 is not supported with Qt 4.
*/

/*!
    \page platform-notes-windows.html
    \title Platform and Compiler Notes - Windows
    \contentspage Platform and Compiler Notes

    This page contains information about the Windows platforms Qt is currently
    known to run on, with links to platform-specific notes. More information
    about the combinations of platforms and compilers supported by Qt can be
    found on the \l{Supported Platforms} page.

    \tableofcontents

    \section1 Windows Vista, Windows 7, Windows 8

    At the time Qt %VERSION% was released, there were no known issues on these
    platforms.

    \section1 Windows XP

    \section2 Installation location

    Installing Qt into a directory with spaces, e.g. C:\\Program Files, may
    cause linker errors like the following:
    \snippet doc/src/snippets/code/doc_src_platform-notes.qdoc 2

    Install Qt into a subdirectory without spaces to avoid this problem.

    \section2 Possible GL conflict

    There is a known issue with running Microsoft NetMeeting, Lotus SameTime
    and other applications that require screen grabbing while direct
    rendering is enabled. Other GL-applications may not work as expected,
    unless direct rendering is disabled.

    \section2 GCC (MinGW)

    We have tested Qt with this compiler on Windows XP.
    The minimal version of MinGW
    supported is GCC 4.6. For 64 bit builds, \l{TDM-GCC} can be used.

    \section2 Intel C++ Compiler (Windows, Altix)

    Qt 4 has been tested successfully with:

    \list
    \li Windows - Intel(R) C++ Compiler for 32-bit applications,
       Version 9.1.040.
    \li Altix - Intel(R) C++ Itanium(R) Compiler for Itanium(R)-based
       applications Version 8.1 Build 20050406 Package ID: l_cc_pc_8.1.030
    \endlist

    \section2 Visual Studio (Windows)

    We do most of our Windows development on Windows 7, using Microsoft
    Visual Studio 2008, Visual Studio 2010 or Visual Studio 11 (mostly
    64bit).

    We recommend using Visual Studio 2010 or higher as it supports some
    C++11 features beneficial to performance and memory usage.

    Qt works with all editions of Visual Studio.

    In order to use Qt with the Visual Studio Express Editions
    you need to download and install the Windows SDK.

    The Visual C++ Linker doesn't understand filenames with spaces (as in
    \c{C:\Program files\Qt\}) so you will have to move it to another place,
    or explicitly set the path yourself; for example:

    \snippet doc/src/snippets/code/doc_src_compiler-notes.qdoc 0

    If you are experiencing strange problems with using special flags that
    modify the alignment of structure and union members (such as \c{/Zp2})
    then you will need to recompile Qt with the flags set for the
    application as well.

    Visual Studio 2010 should be updated to Service Pack 1. Otherwise, a
    problem when compiling Qt for 64-bit in release mode may occur (see
    http://support.microsoft.com/kb/2280741).
*/

/*!
    \page platform-notes-mac.html
    \title Platform and Compiler Notes - Mac OS X
    \contentspage Platform and Compiler Notes

    This page contains information about the Mac OS X versions Qt is currently
    known to run on, with links to platform-specific notes. More information
    about the combinations of platforms and compilers supported by Qt can be
    found on the \l{Supported Platforms} page.

    \tableofcontents

    \section1 General Information

    Qt 5 applications can be deployed on Mac OS X 10.6 (Snow Leopard)
    and higher. We reccomenbd using the most recent version of Mac OS
    for developing applicatoions. Qt Binaries built on 10.7 can be
    deployed on 10.6.

    \section2 Required Compiler Versions

    Use the latest gcc or clang as supplied with xcode. Currently
    tested versions are Apple gcc 4.2.1 and Apple clang version 3.1.

    \section2 Binary Package

    \section2 Mac OS X on PowerPC hardware

    Qt 5 does not support OS X on PowerPC.

    \section2 Fink

    If you have installed the Qt for X11 package from \l{Fink},
    it will set the QMAKESPEC environment variable to darwin-g++. This will
    cause problems when you build the Qt for Mac OS X package. To fix this, simply
    unset your QMAKESPEC or set it to macx-g++ before you run configure.
    You need to have a fresh Qt distribution (make confclean).

    \section2 MySQL and Mac OS X

    There seems to be a issue when both -prebind and -multi_module are
    defined when linking static C libraries into dynamic library. If you
    get the following error message when linking Qt:

    \snippet doc/src/snippets/code/doc_src_platform-notes.qdoc 6

    re-link Qt using -single_module. This is only a problem when building the
    MySQL driver into Qt. It does not affect plugins or static builds.

    \section2 Attributes
    The following lists a set of useful attributes that can be used to tweak applications
    on Mac:

    Qt::AA_MacPluginApplication, Qt::AA_DontUseNativeMenuBar, Qt::AA_MacDontSwapCtrlAndMeta
    Qt::WA_MacNoClickThrough, Qt::WA_MacOpaqueSizeGrip, Qt::WA_MacShowFocusRect,
    Qt::WA_MacNormalSize, Qt::WA_MacSmallSize, Qt::WA_MacMiniSize, Qt::WA_MacVariableSize,
    Qt::WA_MacBrushedMetal, Qt::WA_MacAlwaysShowToolWindow, Qt::WA_MacFrameworkScaled,
    Qt::WA_MacNoShadow, Qt::Sheet, Qt::Drawer, Qt::MacWindowToolBarButtonHint, 
    QMainWindow::unifiedTitleAndToolBarOnMac

    \section2 Mixing Qt with native code
    Two classes are awailable for either adding native Cocoa views/controls
    inside a Qt application, or the opposite, embedding Qt into a native
    Cocoa application:

    QMacCocoaViewContainer, QMacNativeWidget 

    \section3 Using native Cocoa panels
    Launching native Cocoa panels from within a Qt application can sometimes
    be problematic. The reason is that Qt's event dispatcher is more flexible
    than what Cocoa offers, and lets the user spin the event dispatcher (and
    running QEventLoop::exec) without having to think about whether or not modal
    dialogs are showing on screen (which is a difference to Cocoa). Therefore
    we need to do special bookkeeping in Qt to handle this correctly, which
    unfortunately make mixing in native panels hard. The best way at the moment
    to do this, is to follow the pattern below, where we post the call to the
    function with native code rather than calling it directly. Then we know that
    Qt has cleanly updated any pending event loop recursions before the native 
    panel is shown:

    \code
        #include <QtGui>

        class NativeProxyObject : public QObject
        {
            Q_OBJECT
        public slots:
            void execNativeDialogLater()
            {
                QMetaObject::invokeMethod(this, "execNativeDialogNow", Qt::QueuedConnection);
            }

            void execNativeDialogNow()
            {
                NSRunAlertPanel(@"A Native dialog", @"", @"OK", @"", @"");
            }

        };

        #include "main.moc"

        int main(int argc, char **argv){
            QApplication app(argc, argv);
            NativeProxyObject proxy;
            QPushButton button("Show native dialog");
            QObject::connect(&button, SIGNAL(clicked()), &proxy, SLOT(execNativeDialogLater()));
            button.show();
            return app.exec();
        }

    \endcode
*/

/*!
    \page platform-notes-windows-ce.html
    \title Platform and Compiler Notes - Windows CE
    \contentspage Platform and Compiler Notes

    This page contains information about the Windows CE and Windows Mobile
    platforms Qt is currently known to run on, with links to platform-specific
    notes. More information about the combinations of platforms and compilers
    supported by Qt can be found on the \l{Supported Platforms} page.
*/

/*!
    \page platform-notes-embedded-linux.html
    \title Platform and Compiler Notes - Embedded Linux
    \contentspage Platform and Compiler Notes

    This page contains information about the Embedded Linux platforms Qt is
    currently known to run on, with links to platform-specific notes. More
    information about the combinations of platforms and compilers supported
    by Qt can be found on the \l{Supported Platforms} page.
*/
