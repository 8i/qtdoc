/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page ios_support.html
    \title Qt for iOS
    \brief Provides insight into Qt's iOS port and how to use it.

    Qt's iOS port allows you to run Qt applications on iOS devices,
    such as iPhones and iPads.

    \section1 Getting Started

    Development and deployment is done using Xcode. The supported
    workflow is to maintain a \c .pro file based project, export it to
    Xcode (and re-export when the project setup changes), and then
    build and deploy using Xcode. We will look at that in more
    detail in the next section.

    The minimum deployment target for Qt applications is iOS 5.0. Qt
    then supports the following devices (iOS might need to be upgraded
    on some devices).

    \list
        \li iPhone 3GS and later
        \li iPod Touch third and later generations
        \li iPad 2 and later
        \li iPad Mini
    \endlist

    \section2 Setting Up the Development Environment

    We assume that you have cloned the Qt 5 repositories (or obtained
    the Qt sources elsewhere) and followed the platform independent
    requirements for building Qt. The requirements are described
    \l{General Qt Requirements}{here}.

    You continue by installing Xcode. You will find it in the App
    Store. For running Qt applications in the simulator that comes
    with Xcode, this is all you need. However, for running
    applications on a device and publishing your applications in the
    App Store, you must join the iOS Developer Program, see
    \l{https://developer.apple.com/programs/ios/} for further
    information. This includes setting up developer certificates and
    provisioning profiles. The easiest solution is to use a profile
    that takes any App ID (a \c *).

    Before building Qt or any applications, you should test that Xcode
    is set up correctly, for example, by running one of the standard
    Xcode app templates.

    We can then build Qt. This is done from the Qt 5 top directory,
    like so:

    \code
        > ./configure -xplatform macx-ios-clang -developer-build -release
    \endcode

    Then simply run \c{make}.

    \note A default build will include both simulator and device
    libraries. If you want to build for a single target, use the \c
    -sdk argument with either \c iphoneos or \c iphonesimulator.

    \section2 Building Applications

    As mentioned previously, the development workflow on iOS consists
    of maintaining a normal \c .pro file project and export it to
    Xcode. Here is how to build a project:

    \list
        \li run qmake (if you have not done so previously)
        \li open the resulting \c .xcodeproject file in Xcode
        \li build the application in Xcode
    \endlist

    Note that you must re-import the project if its setup changes, for
    example, when adding or removing source files.

    \section1 Developing with Qt Creator

    After setting up Qt for iOS as described in the previous section
    or by using an \l{Opensource Downloads}{installer}, you are ready
    to start developing with Qt Creator. Qt Creator is included in the
    installer; otherwise, you can build from source
    (git://gitorious.org/qt-creator/qt-creator.git) or use a separate
    Qt Creator \l{Opensource Downloads}{installer}. You find info on
    how to set up and run iOS applications in its \l{Qt Creator:
    Connecting iOS devices}{manual}.

    In Qt Creator, tested examples on iOS can be looked up. Use the \c ios
    keyword to search for examples in the Qt Creator Welcome mode. Note that
    some examples may have limited functionality.

    \section1 Using Objective-C Code in Qt Applications

    Clang, the compiler used for iOS applications, allows mixing C++
    and Objective-C code; you only have to suffix files containing
    both languages with \c .mm. Note that this makes it possible to
    use frameworks from Apple's iOS Developer Library in Qt
    applications. Most useful is perhaps the possibility for adding
    In-App Purchasing with the StoreKit framework.

    We currently have one example that mixes Objective-C and C++ code.
    You can check it out
    \l{https://github.com/richardmg/qtdd13_qmlapp}{here}.

*/

