/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page android_support.html
\title Android
\brief Provides information about Android support in Qt 5.

The Qt 5 port for Android enables you to run Qt 5 applications on
devices running Android v2.3.3 (API level 10) or later. Here is a list of
supported items:
\list
 \li \l{Qt Widgets} and \l{QML Application Developer Resources}{QML}
     applications
 \li QML media player functionality in \l{Qt Multimedia}
 \li A set of commonly used sensors with \l{Qt Sensors}
 \li Deploying your application to a device from
     \l{Qt Creator Manual}{Qt Creator}
\endlist

\section1 Getting Started

The following step-by-step instructions guide you to set up the environment
on Ubuntu v12.04 and develop a simple helloworld Qt Quick 2 application:

\list 1
 \li Download and install the latest Android NDK and SDK, and update the SDK to
     get the API and tools packages needed for development. You can update the
     SDK using the \l{http://developer.android.com/tools/help/android.html}
     {android} tool that comes with the SDK package. For example, the following
     command starts the \l{http://developer.android.com/sdk/installing/adding-packages.html}
     {Android SDK Manager}, which enables you to select the packages you want
     to install:

     \code
      ./android update sdk
     \endcode
 \li Install the Qt 5.1 binaries and related tools using the Qt binary
     installer. For more details, refer to \l{Qt Installation Program}.
 \li Launch Qt Creator (v2.7.1) and configure it for Android development. For
     more details, refer to \l{Qt Creator: Connecting Android Devices}.
 \li Create a new project using the "Qt Quick 2 Application (Built-in Types)"
     project template.
 \li Configure the project to deploy the application to an Android device. For
     more details, refer to
     \l{Qt Creator: Deploying Applications to Android Devices}.
     \note You can change the default settings for application icons and
     identifier as  described in \l{Qt Creator: Specifying Run Settings}.
 \li Enable \e{USB Debugging} under \c{Developer Options} on your Android
     device and connect it to the PC.

     \note On Android v4.2.2, the "Developer Options" is hidden. You will see
     it after tapping the "Build number" field in "Settings->About" seven
     times.
\endlist

When your device is detected by the PC, run the application from
Qt Creator. Once the application is deployed on the targeted device,
you should see the application running.

\note The deployment process will take a while if the Qt libraries
were not installed on the Android device earlier.

\section1 Porting an Existing Qt Application

Most Qt applications should be portable to Android with ease, unless they
depend on a specific hardware or software feature not supported by Android.
If your application is not using any such feature, deployment is probably the
only step that demands some changes to your application.

Like most UI applications, Qt applications also depend on resources such as
images, icons, translation files, and so on. These resources must be made
available on the device as they are required for the application to function
effectively.

The most convenient option is to bundle the resources into a qrc file,
which gets built into the application binary. This approach reduces the porting
effort considerably and provides faster access to the resources. It is
also a cross-platform approach, which makes porting to other platforms easier.

By default, all Qt applications can access the contents of a qrc file using
the ":/" prefix or the URL scheme prefix, "qrc:". To know more about qrc files
and how they are handled, refer to
\l{The Qt Resource System}{the Qt Resource System}.

The other approach is to deploy the resources into the package's \c{assets}
directory. It is the best option if you want to achieve better
interoperability with the Android APIs. You can access all resources in the
directory using the "assets:" prefix. Unlike qrc, this approach is not a
cross-platform solution.

The following step-by-step instructions guide you to port an existing Qt Quick
application to Android using the qrc approach:

\list 1
 \li Open the existing project in Qt Creator v2.7.1 or later, and configure it
     with "Android for ARM" kit. For more details, refer to
     \l{Qt Creator: Configuring Projects}
 \li Update all local directory imports in the \c{qml} files to use a local
     namespace. For example, to import the QML documents in the "contents"
     directory relative to \c{main.qml}, use the following import statement:

     \code
      import "contents" as Contents
     \endcode
 \li Identify all the resources used by your application and add them to one
     or more qrc files.
     Qt Creator updates your qmake project file with the "RESOURCES"
     variable listing the qrc files you added.
 \li To load or refer to the resources in the qrc file from a C++ file,
     use the "qrc:" prefix with the URL. For example, to load
     the \c{main.qml} file from \c{resources.qrc}, you can use the following
     code in your \c{main} function:
     \code
      QQuickView viewer;
      viewer.setSource(QUrl("qrc:qml/main.qml"));
      viewer.show();
     \endcode

     \note QML documents can refer to the contents in qrc files using the
     relative path to the document. Such references do not require the
     "\c{qrc:}" or "\c{:/}" prefix.
 \li Update the "Run" settings for your project as described in the
     \l{Qt Creator: Specifying Run Settings}

     \note You can change the default settings for application icons and
     identifier.
 \li Save the changes to your project and run the application.
\endlist

Qt Creator deploys your application on the Android device, if the
device is detected by the PC. Otherwise, it tries to run the application on an
AVD (Android Virtual Device). You will be prompted to create one if there are no
AVDs found.

\section1 Related Information
\list
 \li Platform Notes
 \li \l{Qt Creator: Deploying Applications to Android Devices}
\endlist
*/
