/****************************************************************************
**
** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page topics-network-connectivity.html
\title Networking and Connectivity
\brief Qt's network and connectivity features

Qt provides classes for both high-level and low-level network communication,
classes for web integration, and classes for interprocess communication.

For high-level network traffic, Qt Network provides an abstraction layer over
the operations used, showing only high-level classes and functions.

Qt Network can also handle lower level protocols like TCP and UDP. Classes
like QTcpSocket and QUdpSocket enable the developer to send and receive
messages using the TCP or UDP protocol.

Name resolution is done with QHostInfo. QHostInfo is called before creating
a network connection with QTcpSocket or QUdpSocket.

Filtering and redistributing network traffic via proxies can handled by the
QNetWorkProxy class.

Qt Network also provides Bearer Management. It has functions that can start
or stop network interfaces and roam between access points. It does however
not take care of the network configurations itself. The platform needs to
take care of that.

Qt Webkit offers a web browser engine that makes it possible to use web
content in your application. Qt Webkit can render HTML, XHTML,
and SVG documents, and execute Javascript.

Qt also offers functionalities for IPC.

Class QProcess is used to start external programs.

Qt has classes for D-Bus, an interprocess communication and remote procedure
calling mechanism. It mostly communicates via a central server application,
called a bus. However, it is also possible to let applications communicate
directly with each other.

QSharedMemory provides access to a shared memory segment by multiple threads
and processes. It is however also possible for a single process to
exclusively lock that shared memory.

\list
\li \l {Qt Network}
\endlist

\section1 Network Communication

Qt supports a wide range of network communication, with a focus on HTTP, TCP, and UDP.

At the HTTP level, Qt offers the network access API, which consists mainly of QNetworkRequest,
QNetworkAccessManager, and QNetworkReply. Put simply, the QNetworkRequest resembles an HTTP
request, which gets passed to the QNetworkAccessManager to send the request on the wire; this
class returns a QNetworkReply, which enables parsing the HTTP reply. The network access API
uses the socket classes mentioned below (for TCP and SSL) internally.

For communication at the socket level, QTcpSocket, QUdpSocket and QSslSocket should be used.
These classes offer a synchronous API through the waitFor* methods as well as an asynchronous
API; if possible (i.e. if the event loop is running), the asynchronous API should always be
preferred.
Qt also offers QTcpServer to enable the server-side part of a TCP communication. Please note
that there is no HTTP server class in Qt.

For secure communication via SSL, Qt offers a wide range of classes alongside the central
QSslSocket, e.g. QSslCertificate, QSslConfiguration and QSslError. The only supported backend
for SSL in Qt is OpenSSL, which needs to be installed separately.

For mobile devices, Qt offers the bearer management API to track the status of a connection
(e.g. getting notified about online/offline status or whether Wifi or 3G is used).

Qt also offers HTTP support in QML by either using HTTP explicitly via XmlHttpRequest, or by
transparently using HTTP URLs in e.g. Image sources.

\list
\li \l {Network Programming API}
\li \l {Network Programming with Qt}
\li \l {Qt Network - C++ Classes}
\li \l {Secure Sockets Layer (SSL) Classes}
\li \l {Resource Loading and Network Transparency}
\li \l {Bearer Management}
\endlist


\section1 World Wide Web Support

Qt makes it easy to embed web content into your Qt application using features of the QtWebKit
layout engine.
The QtWebKit module equips Qt with support for a broad range of standard web technologies
that make it possible to embed HTML content styled with CSS and scripted with JavaScript into your Qt
application.
QtWebKit facilitates both integration with traditional QWidget based desktop applications as
well as embedding into Qt Quick QML applications.

For more information see \l {Integrating Web Content}.

\section1 Inter-Process Communication

Qt provides several ways to implement Inter-Process Communication
(IPC) in Qt applications.

The cross-platform \l{QtNetwork} module provides classes that make
network programming portable and easy. It offers high-level
classes (e.g., QNetworkAccessManager, QFtp) that communicate using
specific application-level protocols, and lower-level classes
(e.g., QTcpSocket, QTcpServer, QSslSocket) for implementing
protocols.

The cross-platform shared memory class, QSharedMemory, provides
access to the operating system's shared memory implementation.
It allows safe access to shared memory segments by multiple threads
and processes. Additionally, QSystemSemaphore can be used to control
access to resources shared by the system, as well as to communicate
between processes.

The \l{QtDBus} module is a Unix-only library you can use to
implement IPC using the D-Bus protocol. It extends Qt's
\l{signalsandslots.html} {Signals and Slots} mechanism to the IPC
level, allowing a signal emitted by one process to be connected to
a slot in another process. The \l{Qt D-Bus} documentation has detailed
information on how to use the \l{QtDBus} module.

The cross-platform class \l{QProcess} can be used to start external
programs as child processes, and to communicate with them. It provides
an API for monitoring and controlling the state of the child
process. QProcess gives access to the input/output channels of child
process by inheriting from QIODevice.

The \l{QLocalSocket} class provides a local socket. On Windows this is
a named pipe and on Unix this is a local domain socket.
The \l{QLocalServer} class provides a local socket based server. This
class makes it possible to accept incoming local socket connections.

\list
\li \l {Using QtDBus Adaptors}
\li \l {Qt D-Bus}
\li \l {QLocalSocket}
\li \l {Declaring Signals in D-Bus Adaptors}
\li \l {Declaring Slots in D-Bus Adaptors}
\li \l {QDBus Namespace}
\li \l {The QtDBus Type System}
\li \l {QtDBus XML Compiler (qdbusxml2cpp)}
\endlist

*/

/*

  ### Add bluetooth back once we have bluetooth in qt5.git.

\section1 Bluetooth Communication

### Introduction to bluetooth support in Qt.

Make sure the following links are reachable from this section, either directly or indirectly:

\list
\li \l {Qt Bluetooth C++ API}
\li \l {Qt Bluetooth QML API}
\li \l {Qt Bluetooth}
\li \l {Qt Bluetooth Overview}
\li \l {QBluetooth Namespace}
\endlist

*/
