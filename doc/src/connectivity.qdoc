/****************************************************************************
**
** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page topics-network-connectivity.html
\title Networking and Connectivity
\brief Qt's network and connectivity features

### Give a brief overview of the connectivity and networking offering in Qt 5. This can
mean communication between the same application, inside the application, to the
operating system, or through the internet or bluetooth.

Make sure the following links are reachable from this section, either directly or indirectly:

\list
\li \l {Qt Network}
\endlist

\section1 Network Communication

Qt supports a wide range of network communication, with a focus on HTTP, TCP, and UDP.

At the HTTP level, Qt offers the network access API, which consists mainly of QNetworkRequest,
QNetworkAccessManager, and QNetworkReply. Put simply, the QNetworkRequest resembles an HTTP
request, which gets passed to the QNetworkAccessManager to send the request on the wire; this
class returns a QNetworkReply, which enables parsing the HTTP reply. The network access API
uses the socket classes mentioned below (for TCP and SSL) internally.

For communication at the socket level, QTcpSocket, QUdpSocket and QSslSocket should be used.
These classes offer a synchronous API through the waitFor* methods as well as an asynchronous
API; if possible (i.e. if the event loop is running), the asynchronous API should always be
preferred.
Qt also offers QTcpServer to enable the server-side part of a TCP communication. Please note
that there is no HTTP server class in Qt.

For secure communication via SSL, Qt offers a wide range of classes alongside the central
QSslSocket, e.g. QSslCertificate, QSslConfiguration and QSslError. The only supported backend
for SSL in Qt is OpenSSL, which needs to be installed separately.

For mobile devices, Qt offers the bearer management API to track the status of a connection
(e.g. getting notified about online/offline status or whether Wifi or 3G is used).

Qt also offers HTTP support in QML by either using HTTP explicitly via XmlHttpRequest, or by
transparently using HTTP URLs in e.g. Image sources.

\list
\li \l {Network Programming API}
\li \l {Network Programming with Qt}
\li \l {Qt Network - C++ Classes}
\li \l {Secure Sockets Layer (SSL) Classes}
\li \l {Resource Loading and Network Transparency}
\li \l {Bearer Management}
\endlist


\section1 World Wide Web Support

### Briefly discuss using WebKit in QML or with QtWidgets to display web information in an
application with links to the relevant overview pages.

\section1 Inter-Process Communication

### Introduction to the different ways of doing IPC in Qt: DBUS, QProcess, QSharedMemory, TCP.

Make sure the following links are reachable from this section, either directly or indirectly:

\list
\li \l {Using QtDBus Adaptors}
\li \l {QtDBus module}
\li \l {D-Bus}
\li \l {Inter-Process Communication in Qt}
\li \l {Declaring Signals in D-Bus Adaptors}
\li \l {Declaring Slots in D-Bus Adaptors}
\li \l {QDBus Namespace}
\li \l {The QtDBus Type System}
\li \l {D-Bus Viewer}
\li \l {QtDBus XML Compiler (qdbusxml2cpp)}
\endlist

*/

/*

  ### Add bluetooth back once we have bluetooth in qt5.git.

\section1 Bluetooth Communication

### Introduction to bluetooth support in Qt.

Make sure the following links are reachable from this section, either directly or indirectly:

\list
\li \l {Qt Bluetooth C++ API}
\li \l {Qt Bluetooth QML API}
\li \l {Qt Bluetooth}
\li \l {Qt Bluetooth Overview}
\li \l {QBluetooth Namespace}
\endlist

*/
