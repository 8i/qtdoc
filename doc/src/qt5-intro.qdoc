/****************************************************************************
**
** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qt5-intro.html
    \title Introduction to Qt 5
    \brief Qt 5 features and its benefits

    Qt 5 is the latest version of the Qt C++ UI framework supported on Linux
    (X11 and Wayland), MS Windows, and Mac OS X. It makes developersâ€™ lives
    easy by enabling them to develop applications faster than ever before with
    intuitive user interfaces for multiple targets. With Qt 5, it is
    easier to address the latest UI paradigm shifts that touch screens and
    tablets require.

    Developers can be more productive and flexible with the improved support
    for JavaScript and QML in Qt 5, without disturbing the C++ foundation
    and Qt Widget support. The JavaScript backend powered by V8
    and Qt WebKit 2 will make HTML5 developers feel at home.

    Cross-platform portability is made simpler in Qt 5, thanks to the new
    modularized codebase consisting of the
    \l{All Modules}{essentials and add-ons} modules, and the consolidation
    of the \l{Qt Platform Abstraction}.

    The following sections summarize some of the key features that Qt 5 brings
    to the table.

    \section1 Amazing Graphics Capability and Performance

    Improved graphical effects are an achievable target now with Qt 5 even on
    the constrained hardware environments of mobile and embedded devices.
    Qt 5 uses OpenGL ES for impressive graphics features and better 2D and 3D
    animations. The new version of Qt Quick complements the OpenGL ES scene
    graph backend, which makes the animations look more appealing and smoother
    than before.

    The benefits of this architectural change in the rendering engine is well
    demonstrated by the following projects:
    \list
    \li \l{Livecoding video effects with Qt5} - The Big Buck Bunny you
        never saw before. Video effects created using Qt Quick 2.0.
    \li \l{Pimp my video} - Video effects implemented using the shader language
        with QML.
    \li \l{QtMediaHub} - The power and convenience of Qt Quick.
    \li \l{QtonPi} - Good example of Qt 5 running on the low cost hardware,
        Raspberry PI.
    \endlist

    \section1 Qt Quick in Qt 5

    Qt Quick provides the necessary infrastructure to develop QML applications.
    The latest version (v2.0) of this technology also introduces a set of new
    C++ classes as a replacement for the QDeclarative* equivalents in Qt
    Quick 1. Refer to \l{Qt Quick Release Notes} for details about the new
    features.

    \section1 Connectivity and Networking

    Qt 5 provides better support for IPv6 and dual mode networks. Most
    applications using host names and network layer transparent protocols
    can now gain IPv6 support transparently. Such applications can also choose
    to receive both IPv4 and IPv6 connections or bind to only one of the two
    connection types. In the case of outgoing HTTP connections using
    \c{QNetworkAccessManager}, both IPv4 and IPv6 connections are attempted in
    parallel, and the one that succeeds first is used. This is useful in
    environments where one of the two types has limited connectivity.

    Qt 5 also provides better ways to handle TCP socket-based connections and
    SSL certificates. This means developers can now:
    \list
      \li bind a TCP socket to an IP address before connecting,
      \li verify an SSL certificate chain programmatically,
      \li and access legacy systems.
    \endlist

    Stricter client authentication is one of the primary concerns for many
    applications handling confidential/critical data. The opaque Private Keys
    support in Qt 5 enables applications to read private keys from devices such
    as PKCS#11 dongles for stricter client authentication. The \l{qsslkey
    example} illustrates reading private keys from a device.

    \section1 JSON Support

    Qt applications that use simple data structures to store small amount of
    data, can now choose to use JSON documents over the complex database
    backends that need necessary drivers or plugins to access data. The fact
    that JSON is a text-based open standard derived from JavaScript, makes it
    the obvious choice for QML applications as well.

    The Qt Core provides a set of classes to enable parsing and generating JSON
    documents. These classes also allow you to convert between an in-memory
    binary representation of JSON to a standard textual JSON format. The goal
    is to make common operations on JSON faster.

    \section1 Mouse Input

    Qt applications can now receive button events from more mouse buttons:
    \list
      \li 27 mouse buttons on X11.
      \li 16 mouse buttons on Wayland and Mac OS X.
    \endlist

    This comes in handy for gaming applications developed using Qt.

    \note: Qt on Windows continues to support only 5 mouse buttons due to the
    Windows Platform limitation.

   \section1 Related Topics
   \list
    \li \l{What's New in Qt 5}
    \li \l{Porting Guide}
   \endlist
*/
