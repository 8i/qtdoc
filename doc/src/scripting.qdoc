/****************************************************************************
**
** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page topics-scripting.html
\title Scripting
\brief Qt's scripting features

Qt has three main ways to help in making an application scriptable. All of them allow to easily
integrate \l{ECMAScript Reference}{ECMAScript} language into the application. Depending how deep
the integration should be, one of these api can be used:

\list
\li \lÂ QtScript. It is a separate module, designed with scripting applications in mind. It has
 a mature and rich api that permits a really deep integration of scripting functionality. It allows
 to evaluate and debug scripts, advanced use of objects and functions, it also gives an access to really
 low level \l{ECMAScript Reference}{ECMAScript} engine API. Full documentation about using QtScript to make an application
 scriptable can be found \l{Making Applications Scriptable}{here}.
\li JS api. Simple api, very similar to QtScript, but limited to a basic functionality. The main
 classes are QJSEngine and QJSValue which can be used to embed pure \l{ECMAScript Reference}{ECMAScript} functionality
 like evaluating scripts and calling functions.
\li QML. API exposing a modified \l{ECMAScript Reference}{ECMAScript} environment, it is supposed to mix well with JS
 api mentioned earlier. QML may be used without QtQuick components which may be useful for
 a server side scripting. QML allows to use pure \l{ECMAScript Reference}{ECMAScript} and declarative components
 together (\l{Use Case - Integrating JavaScript in QML}).
\endlist

All of them seamlessly inter-operate with \l{The Meta-Object System}{the Meta-Object System}, which means that all \l{Signals & Slots}{signals and slots},
\l{The property system}{properties} of a QObject instance would be accessible in \l{ECMAScript Reference}{ECMAScript} environment.
*/
