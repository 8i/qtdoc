/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page deployment.html
    \title Deploying Qt Applications

    Deploying an Qt application does not require any C++
    programming. All you need to do is to build Qt and your
    application in release mode, following the procedures described in
    this documentation. We will demonstrate the procedures in terms of
    deploying the \l {tools/plugandpaint}{Plug & Paint} application
    that is provided in Qt's examples directory.

    \section1 Static vs. Shared Libraries

    There are two ways of deploying an application:

    \list
        \li Static Linking
        \li Shared Libraries (Frameworks on Mac)
    \endlist

    Static linking results in a stand-alone executable. The advantage
    is that you will only have a few files to deploy. The
    disadvantages are that the executables are large and with no
    flexibility (i.e a new version of the application, or of Qt, will
    require that the deployment process is repeated), and that you
    cannot deploy plugins.

    To deploy plugin-based applications, you can use the shared
    library approach. Shared libraries also provide smaller, more
    flexible executables. For example, using the shared library
    approach, the user is able to independently upgrade the Qt library
    used by the application.

    Another reason why you might want to use the shared library
    approach, is if you want to use the same Qt libraries for a family
    of applications. In fact, if you download the binary installation
    of Qt, you get Qt as a shared library.

    The disadvantage with the shared library approach is that you
    will get more files to deploy. For more information, see
    \l{Creating Shared Libraries}.

    \section1 Deploying Qt's Libraries

    \table
    \header
        \li {4,1} Qt Libraries
    \row
        \li \l{Qt Core}{QtCore}
        \li \l{Qt Network}{QtNetwork}
        \li \l{Qt GUI}{QtGui}
        \li \l{Qt SQL}{QtSql}
    \row
        \li \l{Qt Test}{QtTest}
        \li \l{Qt Widgets}{QtWidgets}
        \li \l{Qt QML}{QtQml}
        \li \l{Qt Quick}{QtQuick}
    \row
        \li \l{Qt Multimedia}{QtMultimedia}
        \li \l{Qt WebKit}{QtWebkit}
        \li \l{Qt WebKit Widgets}{QtWebKitWidgets}
        \li \l{Qt XML}{QtXml}
    \row
        \li \l{Qt XML Patterns}{QtXmlPatterns}
        \li \l{Qt SVG}{QtSvg}
        \li \l{Qt Concurrent}{QtConcurrent}
        \li \l{Qt Print Support}{QtPrintSupport}
    \row
        \li \l{Qt D-Bus}{QtDBus}
        \li \l{Qt OpenGL}{QtOpenGL}
        \li \l{ActiveQt}{QtActiveQt}
        \li \l{Qt Graphical Effects}{QtGraphicalEffects}
    \row
        \li \l{Qt Script}{QtScript}
        \li \l{Qt Quick 1}{QtDeclarative}
        \li \l{Qt Image Formats}{QtImageFormats}
    \endtable

    Qt is not a system library, so it must be redistributed with your
    application. The minimum is to redistribute the run-time
    of the libraries used by the application.  However, with static linking,
    the Qt run-times can be compiled into the executable.

    In general, you should deploy all plugins that your Qt build uses,
    excluding those that you have identified as unnecessary for your
    application and its users.

    For instance, you may need to deploy plugins for JPEG support and
    SQL drivers, but you should also deploy plugins that your users may
    require, including those for accessibility.
    For more information about plugins, see \l{How to Create Qt Plugins}.

    While deploying an application using the shared library approach,
    you must ensure that the Qt libraries use the correct path to
    find the Qt plugins, documentation, translation, and so on. To do this, you
    can use a \c qt.conf file. For more information, see \l {Using
    qt.conf}.

    Depending on configuration, compiler-specific libraries must be
    redistributed as well. For more information, see the
    platform-specific application dependencies for
    \l{deployment-x11.html#application-dependencies}{X11},
    \l{deployment-windows.html#application-dependencies}{Windows},
    and \l{deployment-mac.html#application-dependencies}{Mac}.

    \section1 Licensing

    Some of Qt's libraries are based on third party libraries that are
    not licensed using the same dual-license model as Qt. As a result,
    care must be taken when deploying applications that use these
    libraries, particularly when the application is statically linked
    to them.

    The following table summarizes a few issues that
    you should be aware of.

    \table
    \header \li Qt Library \li Dependency
            \li Licensing Issue
    \row    \li \l{QtHelp}     \li CLucene
    \li The version of clucene distributed with Qt is licensed
    under the GNU LGPL version 2.1 or later. This has implications for
    developers of closed source applications. Please see
    \l{QtHelp Module#License Information}{the QtHelp module documentation}
    for more information.

    \row    \li \l{QtNetwork}  \li OpenSSL
    \li Some configurations of QtNetwork use OpenSSL at run-time. Deployment
    of OpenSSL libraries is subject to both licensing and export restrictions.
    More information can be found in the \l{Secure Sockets Layer (SSL) Classes}
    documentation.

    \row    \li \l{QtWebKit}   \li WebKit
    \li WebKit is licensed under the GNU LGPL version 2 or later.
    This has implications for developers of closed source applications.
    Please see \l{WebKit in Qt#License Information}{the QtWebKit module
    documentation} for more information.

    \endtable

    \section1 Platform-Specific Notes

    The procedure of deploying Qt applications is different for the
    various platforms:

    \list
        \li \l{Deploying an Application on X11 Platforms}{Qt for X11 Platforms}
        \li \l{Deploying an Application on Windows}{Qt for Windows}
        \li \l{Deploying an Application on Mac OS X}{Qt for Mac OS X}
    \endlist

    \sa {Deploying Translations}, Installation
*/
