/****************************************************************************
**
** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page topics-data-storage.html
\title Data Structures and Storage
\brief Qt's data and storage features

\section1 Container Classes

A container is a data structure whose instances are collections of other
objects. Some examples of containers are: dynamic arrays, queues, linked
lists and associative arrays. Qt provides a set of general purpose,
template-based container classes that can be used to store data in memory.
See the full list of \l {Container Classes} for more details.

\section1 Saving and Loading Data

The QIODevice class is the base class for all file and data storage devices
in \l {Qt Core}. All classes that are used for reading and writing data
inherit from it.

Examples of devices are QFile, QBuffer, QTcpSocket and QProcess.
QFile is used for reading and writing text, binary files and resources.
The QBuffer class provides a QIODevice interface for a QByteArray.
QTcpSocket enables the developer to establish a TCP connection and transfer
streams of data. QProcess is used to start external programs, and to read
from and write to that process.

\list
\li \l {Input/Output and Networking} (list of I/O related classes)
\li \l {File and Datastream Functions}
\li \l {Serializing Qt Data Types}
\endlist

\section1 SQL support in Qt

The \l {Qt SQL} module uses driver plugins to communicate with several database
APIs. Qt has drivers for SQLite, MYSQL, DB2, Borland InterBase, Oracle, ODBC,
and PostgreSQL. It is also possible to develop your own driver if Qt does not
provide the driver needed.

Qt's SQL classes can be divided in 3 layers:
\table
    \header
        \li Layer
        \li Purpose
        \li Example class
    \row
        \li
            \list
               \li Driver layer
               \li SQL API layer
               \li User Interface layer
            \endlist
        \li
            \list
               \li Low-level communication between database and the SQL API layer
               \li Provide access to databases
               \li Link data from a database to data-aware widgets
            \endlist
        \li
            \list
               \li QSqlDriver, QSqlDriverCreator
               \li QSqlDatabase, QSqlQuery
               \li QSqlQueryModel (read-only), QSqlTableModel (read-write), QSqlRelationalTableModel (read-write with foreign-key support)
            \endlist
\endtable

QSqlQueryModel, QSqlTableModel and QSqlRelationalTableModel can be used as a
datasource for Qt's classes for viewing data. QSqlTableModel and QtSqlRelational-
TableModel provide editable models for use with Qt's item views. QSqlTableModel
has read/write access to a single table. QSqlRelationalTableModel has read/write
access to the main table, not to the table where the foreign key comes from.

With the MYSQL driver, it is possible to connect to a MYSQL server. In order to
build the QMYSQL Plugin for Unix or Mac OS X, you need the MYSQL header files
as well as the shared library libmysqlclient.so. To compile the plugin
for Windows, you need to get the MYSQL installation files and run SETUP.EXE.

If you use the embedded MYSQL Server, you do not need a MYSQL server in order
to use that database system. In order to do so, you need to link the Qt plugin
to libmysqld instead of libmysqlclient.

The Qt SQLite plugin is very suitable for local storage. SQLite is a relational
database management system contained in a small (~350 KiB) C library.
In contrast to other database management systems, SQLite is not a separate process
that is accessed from the client application, but an integral part of it. SQLite
operates on a single file, which must be set as the database name when opening
a connection. If the file does not exist, SQLite will try to create it.

SQLite has some restrictions regarding multiple users and multiple transactions.
If you are reading or writing on a file from different transactions, your appli-
cation might freeze until one transaction commits or rolls back.

\list
\li \l {SQL in Qt}
\li \l {Qt SQL}
\li \l {Qt SQL Module - C++ Classes}
\li \l {Connecting to Databases}
\li \l {SQL Database Drivers}
\li \l {Creating Data-Aware Forms}
\li \l {Using the SQL Model Classes}
\li \l {Presenting Data in a Table View}
\li \l {SQL Programming}
\li \l {Executing SQL Statements}
\li \l {Data Types for Qt-supported Database Systems}
\li \l {QML Module QtQuick.LocalStorage 2.0}
\endlist

\section1 XML Support in Qt

The QXmlStreamReader class provides a fast parser for reading XML via a simple
streaming API. QXmlStreamReader is a well-formed XML 1.0 parser that does not
include external parsed entities. As long as no error occurs, the application
code can assume that the XML follows W3C's standards.

QXmlStreamReader understands and resolves XML namespaces. For example, in
case of a StartElement, namespaceUri() returns the namespace the element
is in, and name() returns the element's local name. The combination of
namespaceUri() and name() uniquely identifies an element.

QXmlStreamReader does not put a high load on the CPU, since it doesn't store
the entire XML document tree in memory, but only the current token at the time
it is reported.

The QXmlStreamWriter class provides an XML writer with a simple streaming API.
QXmlStreamWriter is the counterpart to QXmlStreamReader for writing XML.
It operates on a QIODevice specified with setDevice(). The API is quite simple:
for every XML token or event you want to write, the writer provides a dedicated
function.

QXmlStreamWriter takes care of prefixing namespaces, all you have to do
is specify the namespaceUri when writing elements or attributes. If you
have to use certain standardized prefixes, you can force the writer to use them
by declaring the namespaces manually with either writeNamespace()
or writeDefaultNamespace().

The stream writer can automatically format the generated XML data by adding
line-breaks and indentation, making the code much more readable. This feature
can be turned on with the auto-formatting property.

By default, QXmlStreamWriter encodes XML in UTF-8. Different encodings can
be enforced using setCodec().

\list
\li \l {An Introduction to Namespaces}
\li \l {Working with the DOM tree}
\li \l {XML Processing}
\li \l {XQuery}
\li \l {The SAX Interface}
\li \l {XML Streaming}
\li \l {XML Classes}
\li \l {A Short Path to XQuery}
\li \l {QML Module QtQuick.XmlListModel 2.0}
\endlist

\section1 JSON in Qt

### Talk briefly about JSON as a storage format. Make sure the following page is reachable from
this section:

\list
\li \l {JSON Support in Qt}
\endlist

\section1 JavaScript Storage

### Discuss the use of JavaScript storage in Webkit and QML with links to the relevant pages
under both of those technologies.

\section1 QSettings

### Talk about using QSettings for storing user preferences and small amounts of data in
a cross-platform manner.

\section1 Resources

### Talk about using Qt Resources to store data that is used by your application. Mention that
the resources can be embedded in the executable (for smaller resources) or in a separate binary
file. Mention the benefit that the resources can be accessed by the application as if they were
part of a regular file system with relative paths etc. and that this file system also becomes
available to QML with the qrc: url scheme.

Make sure the following page is linked from this section:

\list
\li \l {The Qt Resource System}
\endlist

*/
