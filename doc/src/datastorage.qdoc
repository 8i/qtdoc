/****************************************************************************
**
** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page topics-data-storage.html
\title Data Structure and Storage
\brief Qt's data and storage features

\section1 Container Classes

Qt provides a set of general purpose, template-based container classes that
can be used to store data in memory. For most purposes, QList will be the
best choice, but Qt also provides other data structures which might be more
appropriate for a given use case due to performance characteristics or API.
See the full list of \l {container classes} for more details.

\section1 Saving and Loading Data

### Talk about using the disk to store data and point to documentation for QIODevice, QFile,
QTextStream, QDataStream, as well addressing the fact that disk access API is not available
by default in QML, but that you can easily create a C++ extension which suits your needs.

In addition, make sure the following pages are reachable via links from this section:

\list
\li \l {Input/Output and Networking} (list of I/O related classes)
\li \l {Serializing Qt Data Types}
\endlist

\section1 SQL support in Qt

The \l {Qt SQL} module uses driver plugins to communicate with several database
APIs. Qt has drivers for SQLite, MYSQL, DB2, Borland InterBase, Oracle, ODBC,
and PostgreSQL. It is also possible to develop your own driver if Qt is not
providing the driver needed.

Qt's SQL classes can be divided in 3 layers:
\table
    \header
        \li Layer
        \li Purpose
        \li Example class
    \row
        \li
            \list
               \li Driver layer
               \li SQL API layer
               \li User Interface layer
            \endlist
        \li
            \list
               \li Low-level communication between database and the SQL API layer
               \li Provide access to databases
               \li Link data from a database to data-aware widgets
            \endlist
        \li
            \list
               \li QSqlDriver, QSqlDriverCreator
               \li QSqlDatabase, QSqlQuery
               \li QSqlQueryModel (read-only), QSqlTableModel (read-write), QSqlRelationalTableModel (read-write with foreign-key support)
            \endlist
\endtable

QSqlQueryModel, QSqlTableModel and QSqlRelationalTableModel can be used as a
datasource for Qt's classes for viewing data. QSqlTableModel and QtSqlRelational-
TableModel provide editable models for use with Qt's item views. QSqlTableModel
has read/write access to a single table. QSqlRelationalTableModel has read/write
access to the main table, not to the table where the foreign key comes from.

With the MYSQL driver, it is possible to connect to a MYSQL server. In order to
build the QMYSQL Plugin for Unix or Mac OS X, you need the MYSQL header files
and as well as the shared library libmysqlclient.so. To compile the plugin
for Windows, you need to get the MYSQL installation files and to run SETUP.EXE.

If you use the embedded MYSQL Server, you do not need a MYSQL server in order
to use that database system. In order to do so, you need to link the Qt plugin
to libmysqld instead of libmysqlclient.

The Qt SQLite plugin is very suitable for local storage. SQLite is a relational
database management system contained in a small (~350 KiB) C library.
In contrast to other database management systems, SQLite is not a separate process
that is accessed from the client application, but an integral part of it. SQLite
operates on a single file, which must be set as the database name when opening
a connection. If the file does not exist, SQLite will try to create it.

SQLite has some restrictions regarding multiple users and multiple transactions.
If you are reading or writing on a file from different transactions, your appli-
cation might freeze until one transaction commits or rolls back.

\list
\li \l {SQL in Qt}
\li \l {Qt SQL}
\li \l {Qt SQL Module - C++ Classes}
\li \l {Connecting to Databases}
\li \l {SQL Database Drivers}
\li \l {Creating Data-Aware Forms}
\li \l {Using the SQL Model Classes}
\li \l {Presenting Data in a Table View}
\li \l {SQL Programming}
\li \l {Executing SQL Statements}
\li \l {Data Types for Qt-supported Database Systems}
\li \l {QML Module QtQuick.LocalStorage 2.0}
\endlist

\section1 XML Support in Qt

### Talk briefly about XML as a storage format and mention main classes QXMLStreamReader and
QXMLStreamWriter, as well as XML usage in QML.

In addition, make sure the following pages are reachable from this section, either directly
or indirectly:

\list
\li \l {An Introduction to Namespaces}
\li \l {Working with the DOM tree}
\li \l {XML Processing}
\li \l {XQuery}
\li \l {The SAX Interface}
\li \l {XML Streaming}
\li \l {XML Classes}
\li \l {A Short Path to XQuery}
\li \l {QML Module QtQuick.XmlListModel 2.0}
\endlist

\section1 JSON in Qt

### Talk briefly about JSON as a storage format. Make sure the following page is reachable from
this section:

\list
\li \l {JSON Support in Qt}
\endlist

\section1 JavaScript Storage

### Discuss the use of JavaScript storage in Webkit and QML with links to the relevant pages
under both of those technologies.

\section1 QSettings

### Talk about using QSettings for storing user preferences and small amounts of data in
a cross-platform manner.

\section1 Resources

### Talk about using Qt Resources to store data that is used by your application. Mention that
the resources can be embedded in the executable (for smaller resources) or in a separate binary
file. Mention the benefit that the resources can be accessed by the application as if they were
part of a regular file system with relative paths etc. and that this file system also becomes
available to QML with the qrc: url scheme.

Make sure the following page is linked from this section:

\list
\li \l {The Qt Resource System}
\endlist

*/
