/****************************************************************************
**
** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\group installation
\title Installation
\brief Installing Qt on supported platforms.

The installation procedure is different on each Qt platform. This page provides
information on how to install Qt, as well as software and hardware requirements
for using Qt on each of the supported platforms. Please follow the instructions
for your platform from the following list.

\generatelist{related}

*/

/*! \page install-x11.html
\title Installing Qt for X11 Platforms
\ingroup installation
\brief How to install Qt on platforms with X11.
\previouspage Installation

\tableofcontents

    Qt for X11 has some requirements that are given in more detail
    in the \l{Qt for X11 Requirements} document.

\section1 Step 1: Installing the License File (commercial editions only)
    If you have the commercial edition of Qt, install your license
    file as \c{$HOME/.qt-license}.

    For the open source version you do not need a license file.

\section1 Step 2: Unpacking the Archive
    Unpack the archive if you have not done so already. For example,
    if you have the \c{qt-everywhere-opensource-src-%VERSION%.tar.gz}
    package, type the following commands at a command line prompt:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 0

    This creates the directory \c{/tmp/qt-everywhere-opensource-src-%VERSION%}
    containing the files from the archive. We only support the GNU version of
    the tar archiving utility. Note that on some systems it is called gtar.

\section1 Step 3: Building the Library

    To configure the Qt library for your machine type, run the
    \c{./configure} script in the package directory.

    By default, Qt is configured for installation in the
    \c{/usr/local/Qt-%VERSION%} directory, but this can be
    changed by using the \c{-prefix} option.

\snippet doc/src/snippets/code/doc_src_installation.qdoc 1

    Type \c{./configure -help} to get a list of all available options.
    The \l{Configuration Options for Qt} page gives a brief overview
    of these.

    To create the library and compile all the examples, tools,
    and tutorials, type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 2

    If \c{-prefix} is outside the build directory, you need to install
    the library, examples, tools, and tutorials in the appropriate
    place. To do this (as root if necessary), type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 3

    Note that on some systems the make utility is named differently,
    e.g. gmake. The configure script tells you which make utility to
    use.

    \b{Note:} If you later need to reconfigure and rebuild Qt from the
    same location, ensure that all traces of the previous configuration are
    removed by entering the build directory and typing \c{make confclean}
    before running \c configure again.

\section1 Step 4: Set the Environment Variables

    In order to use Qt, some environment variables needs to be
    extended.

\snippet doc/src/snippets/code/doc_src_installation.qdoc 4

    This is done like this:

    In \c{.profile} (if your shell is bash, ksh, zsh or sh), add the
    following lines:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 5

    In \c{.login} (in case your shell is csh or tcsh), add the following line:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 6

    If you use a different shell, please modify your environment
    variables accordingly.

    For compilers that do not support rpath you must also extended the
    \c LD_LIBRARY_PATH environment variable to include
    \c{/usr/local/Qt-%VERSION%/lib}. On Linux with GCC this step
    is not needed.

\b {That's all. Qt is now installed.}

\section1 Qt Demos and Examples

    If you are new to Qt, we suggest that you take a look at the
    examples to see Qt in action. Run the Qt Examples
    either by typing \c qtdemo on the command line or through the
    desktop's Main menu.

    You might also want to try the following links:

    \list
    \li \l{Configuring Qt}
    \li \l{How to Learn Qt}
    \li \l{Tutorials}
    \li \l{Deploying Qt Applications}
    \endlist

    We hope you will enjoy using Qt. Good luck!

*/

/*!
\page install-win.html
\title Installing Qt for Windows
\ingroup installation
\brief How to install Qt on Windows.
\previouspage Installation

\tableofcontents

    Qt for Windows has some requirements that are given in more detail
    in the \l{Qt for Windows Requirements} document.

    If you have obtained a binary package for this platform,
    consult the installation instructions provided instead of the ones in
    this document.


\section1 Step 1: Install the License File (commercial editions only)

    If you have the commercial edition of Qt, copy the license file
    from your account on the distribution server into your home directory
    (this may be known as the \c userprofile environment variable) and
    rename it to \c{.qt-license}. This renaming process must be done
    using a \e{command prompt} on Windows, \b{not} with Windows Explorer.
    For example on Windows 2000, \c{%USERPROFILE%} should be something
    like \c{C:\Documents and Settings\username}

    For the open source version you do not need a license file.

\section1 Step 2: Unpack the Archive

    Uncompress the files into the directory you want Qt installed;
    e.g. \c{C:\Qt\%VERSION%}.

    \note The install path must not contain any spaces or Windows specific
    file system characters.

\section1 Step 3: Set the Environment variables

    We recommend creating a desktop link that opens a command
    prompt with the environment set up similar to the
    \uicontrol{Command Prompt} menu entries provided by the Windows SDKs.
    This is done by creating an application link passing a \c .cmd file setting
    up the environment and the command line option \c /k (remain open)
    to \c cmd.exe.

    Assuming the file is called \c{qt5vars.cmd}
    and the Qt folder is called \c qt-5 and located under \c C:\qt:

    \code
    REM Set up Windows SDK for 64bit
    CALL "C:\Program Files (x86)\MSVC10\VC\vcvarsall.bat" amd64
    set PATH=c:\qt\qt-5\qtbase\bin;c:\qt\qt-5\qtrepotools\bin;c:\qt\qt-5\gnuwin32\bin;%PATH%
    set QMAKESPEC=win32-msvc2010
    \endcode

    A desktop link can then be created by specifying the command
    \c{%SystemRoot%\system32\cmd.exe /E:ON /V:ON  /k c:\qt\qt5vars.cmd}
    as application and \c{c:\qt\qt-5} as working directory.

    \note Setups for MinGW are similar; they differ
    only in that the \c bin folder of the installation should be added to the
    path instead of calling the Windows SDK setup script. For MinGW, please make
    sure that no \c sh.exe can be found in the path, as it affects \c {mingw32-make}.

    Settings required by the additional libraries (see \l{Qt for Windows Requirements})
    should also go this file below the call to the Windows SDK setup script.

\section1 Step 4: Build the Qt Library

    The default behavior of configure is to create an in-source build
    of Qt 5. If you want to install Qt 5 to a separate location,
    you need to specify the command line option \c{-prefix <location>}.
    Alternatively, the command line option \c -developer-build creates
    an in-source build for developer usage.

    To configure the Qt library for a debug build for your machine, type
    the following command in the command prompt:

    \code
    configure -debug -nomake examples -opensource
    \endcode

    Type \c{configure -help} to get a list of all available options. The
    \l{Configuration Options for Qt} page gives a brief overview of these.

    To build Qt using \l{jom}, type:

    \code
    jom
    \endcode

    If you do not have \l{jom} installed, type:

    \code
    nmake
    \endcode

    For MinGW, type:

    \code
    mingw32-make
    \endcode

    If an installation prefix was given, type
    \c{jom install}, \c{nmake install} or \c{mingw32-make install}.

    \note If you later need to reconfigure and rebuild Qt from the
    same location, ensure that all traces of the previous configuration are
    removed by entering the build directory and typing \c{nmake distclean}
    before running \c configure again.

\b{That's all. Qt is now installed.}

\section1 Qt Demos and Examples

    If you are new to Qt, we suggest that you take a look at the
    examples to see Qt in action (provided in the \c examples folder
    of each module).

    You might also want to try the following links:

    \list
    \li \l{How to Learn Qt}
    \li \l{Tutorials}
    \li \l{Deploying Qt Applications}
    \endlist

    We hope you will enjoy using Qt. Good luck!

*/

/*! \page install-mac.html
\title Installing Qt for Mac OS X
\ingroup installation
\brief How to install Qt on Mac OS X.
\previouspage Installation
\tableofcontents

Qt for Mac OS X has some requirements that are given in more detail
in the \l{Qt for Mac OS X Requirements} document.

The following instructions describe how to install Qt from the source package.

For the binary package, simply double-click on the Qt.mpkg
and follow the instructions to install Qt. You can later run the \c{uninstall-qt.py}
script to uninstall the binary package. The script is located in /Developer/Tools and
must be run as root.

\note Do not run the iPhone simulator while installing Qt. The
\l{http://openradar.appspot.com/7214991}
{iPhone simulator conflicts with the package installer}.

\section1 Step 1: Install the License File (commercial editions only)
    If you have the commercial edition of Qt, install your license
    file as \c{$HOME/.qt-license}.

    For the open source version you do not need a license file.

    Unpack the archive if you have not done so already. For example,
    if you have the \c{qt-everywhere-opensource-src-%VERSION%.tar.gz}
    package, type the following commands at a command line prompt:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 11

    This creates the directory \c{/tmp/qt-everywhere-opensource-src-%VERSION%}
    containing the files from the archive.

\section1 Step 2:  Build the Qt Library

    To configure the Qt library for your machine type, run the
    \c{./configure} script in the package directory.

    By default, Qt is configured for installation in the
    \c{/usr/local/Qt-%VERSION%} directory, but this can be
    changed by using the \c{-prefix} option.

\snippet doc/src/snippets/code/doc_src_installation.qdoc 12

    Type \c{./configure -help} to get a list of all available options.

    Note that you will need to specify \c{-universal} if you want to
    build universal binaries, and also supply a path to the \c{-sdk}
    option if your development machine has a PowerPC CPU. By default,
    Qt is built as a framework, but you can built it as a set of
    dynamic libraries (dylibs) by specifying the \c{-no-framework}
    option.

    Qt can also be configured to be built with debugging symbols. This
    process is described in detail in the \l{Debugging Techniques}
    document.

    To create the library and compile all the examples, tools,
    and tutorials, type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 13

    If \c{-prefix} is outside the build directory, you need to install
    the library, examples, tools, and tutorials in the appropriate
    place. To do this, type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 14

    This command requires that you have administrator access
    on your machine.

    \note There is a potential race condition when running make install with multiple
    jobs. It is best to only run one make job (-j1) for the install.

    If you later need to reconfigure and rebuild Qt from the
    same location, ensure that all traces of the previous configuration are
    removed by entering the build directory and typing \c{make confclean}
    before running \c configure again.

\section1 Step 3: Set the Environment variables

    In order to use Qt, some environment variables need to be
    extended.

\snippet doc/src/snippets/code/doc_src_installation.qdoc 15

    This is done like this:

    In \c{.profile} (if your shell is bash), add the following lines:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 16

    In \c{.login} (in case your shell is csh or tcsh), add the following line:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 17

    If you use a different shell, please modify your environment
    variables accordingly.

\b {That's all. Qt is now installed.}

\section1 Qt Demos and Examples
    If you are new to Qt, we suggest that you take a look at the
    examples to see Qt in action. Run the Qt Examples
    either by typing \c qtdemo on the command line or through the
    desktop's Start menu.

    You might also want to try the following links:

    \list
    \li \l{How to Learn Qt}
    \li \l{Tutorials}
    \li \l{Deploying Qt Applications}
    \endlist

    We hope you will enjoy using Qt. Good luck!

*/

/*! \page install-wince.html
\title Installing Qt for Windows CE
\ingroup installation
\ingroup qtce
\brief How to install Qt for Windows CE.
\previouspage Installation
\tableofcontents

Qt for Windows CE has some requirements that are given in more detail
in the \l{Qt for Windows CE Requirements} document.

\section1 Step 1: Install the License File (commercial editions only)
    Uncompress the files into the directory you want to install Qt into;
    e.g., \c{C:\Qt\%VERSION%}.

    \note The install path must not contain any spaces.

\section1 Step 2: Set the Environment variables

    In order to build and use Qt, the \c PATH environment variable needs
    to be extended:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 18
    This is done by adding \c{c:\Qt\%VERSION%\bin} to the \c PATH variable.

    For newer versions of Windows, \c PATH can be extended through
    "Control Panel->System->Advanced->Environment variables" and for
    older versions by editing \c{c:\autoexec.bat}.

    Make sure the environment variables for your compiler are set.
    Visual Studio includes \c{vcvars32.bat} for that purpose - or simply
    use the "Visual Studio Command Prompt" from the Start menu.

\section1 Step 3: Configure Qt

    To configure Qt for Windows Mobile 5.0 for Pocket PC, type the
    following:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 19

    If you want to configure Qt for another platform or with other
    options, type \c{configure -help} to get a list of all available
    options. The \l{Configuration Options for Qt} page gives a brief
    overview of these. See the \c README file for the list of supported
    platforms.

\section1 Step 4: Build Qt Library

    Now, to build Qt you first have to update your \c PATH, \c INCLUDE
    and \c LIB paths to point to the correct resources for your target
    platforms. For a default installation of the Windows Mobile 5.0
    Pocket PC SDK, this is done with the following commands:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 20

    We provide a convenience script for this purpose, called \c{setcepaths}.
    Simply type:

\snippet doc/src/snippets/code/doc_src_installation.qdoc 21

    Then to build Qt type:

    \snippet doc/src/snippets/code/doc_src_installation.qdoc 22

\b{That's all. Qt is now installed.}

\section1 Qt Demos and Examples

    To get started with Qt, you can check out the examples found in the
    \c{examples} directory of your Qt installation. The documentation can
    be found in \c{doc\html}.

    \note If you reconfigure Qt for a different platform,
    make sure you start with a new clean console to get rid of the
    platform dependent include directories.

    The links below provide further information for using Qt:
    \list
    \li \l{How to Learn Qt}
    \li \l{Tutorials}
    \li \l{Deploying Qt Applications}
    \endlist

    You might also want to try the following Windows CE specific links:
    \list
    \li \l{Windows CE - Introduction to using Qt}
    \li \l{Windows CE - Working with Custom SDKs}
    \li \l{Windows CE - Using shadow builds}
    \li \l{Windows CE - Signing}
    \endlist

    Information on feature and performance tuning for embedded builds can
    be found on the following pages:
    \list
    \li \l{Fine-Tuning Features in Qt}
    \li \l{Qt Performance Tuning}
    \endlist

    We hope you will enjoy using Qt. Good luck!
*/

/*!
    \page requirements.html
    \title General Qt Requirements
    \ingroup installation
    \brief Outlines the general requirements and dependencies needed to install Qt.

    This page describes the specific requirements of libraries and components on which
    Qt depends. For information about installing Qt, see the \l{Installation} page.

    For information about the platforms that Qt supports, see the \l{Supported Platforms}
    page.

    \section1 OpenSSL (version 0.9.7 or later)

    Support for \l{SSL}{Secure Sockets Layer (SSL)} communication is provided by the
    \l{OpenSSL Toolkit}, which must be obtained separately. More information about
    enabling SSL support can be found in the \l{Secure Sockets Layer (SSL) Classes}
    document.

    \section1 Platform-Specific Requirements

    Each platform has its own specific set of dependencies. Please see the relevant
    page for more details about the components that are required to build and install
    Qt on your platform.

    \list
    \li \l{Qt for Embedded Linux Requirements}
    \li \l{Qt for Mac OS X Requirements}
    \li \l{Qt for Windows CE Requirements}
    \li \l{Qt for Windows Requirements}
    \li \l{Qt for X11 Requirements}
    \endlist
*/

/*!
    \page requirements-win.html
    \title Qt for Windows Requirements
    \ingroup installation
    \brief Setting up the Windows environment for Qt.
    \previouspage General Qt Requirements

    \section1 Graphics Drivers

    For QML2 to work, a graphics driver that provides OpenGL 2.1 or higher is required.
    The Windows default driver provides only OpenGL 1.1, which is not sufficient.

    Alternatively, \l{ANGLE} can be used, which provides
    Open GL ES 2.0 by converting the calls to DirectX.

    \section1 Libraries

    \list
        \li \l{ICU}: Qt 5 can make use of the ICU library for
           UNICODE and Globalization support (required for QtWebKit).
           At compile time, the include and lib folders of the ICU installation must be appended to
           the \c INCLUDE and \c LIB environment variables.
           At run-time, the ICU DLLs need to be found. This can be achieved by copying
           the DLLs to the application folder or adding the bin folder of
           the ICU installation to the \c PATH environment variable.

        \li \l{ANGLE}: This library converts
           OpenGL ES 2.0 API calls to DirectX 9, removing the need to install
           graphics drivers on the target machines.
           \l{http://code.google.com/p/angleproject/wiki/DevSetup}{Building}
           the library requires the installation of the
           \l{Direct X SDK}.

           Pass the command line options \c{-opengl es2 -angle <folder>} to \c configure
           to use it.

           \note When building for 64bit, de-activate the \c WarnAsError option
           in every project file (as otherwise integer conversion warnings will
           break the build).
    \endlist

    \section1 Development tools

    \list
        \li Install a recent version of ActivePerl
           and add the installation location to your PATH.
           \note Please make sure the perl executable is found in the path before
           the perl executable provided by msysgit, since the latter is outdated.

        \li Install Python from \l{http://www.python.org/download/}{here}
           and add the installation location to your PATH in order to be able
           to build QtJsBackend and QtWebKit.

        \li \l{jom} is a replacement for \c nmake which makes use of all CPU cores
           and thus speeds up building.
    \endlist

    QtWebKit depends on some extra tools from the \l{GnuWin32 Project}
    which are provided for your convenience in the \c gnuwin32/bin folder:

    \list
        \li \l{http://gnuwin32.sourceforge.net/downlinks/bison.php}{Bison}
        \li \l{http://gnuwin32.sourceforge.net/downlinks/gperf.php}{GPerf}
        \li \l{http://gnuwin32.sourceforge.net/downlinks/flex.php}{Flex}
    \endlist

    The folder should be added to the PATH.

    \section1 SDKs and Compilers

    \list
        \li Windows SDK 7.1 with Visual Studio 2010 SP1 (recommended).
            As of 16.3.2012, installing the SDK requires installing the following packages
            in this order (see \c readme.html provided with the service pack):
            \list
                \li Install Visual Studio 2010
                \li Install Windows SDK 7.1
                \li Install Visual Studio 2010 SP1
                \li Install Visual C++ 2010 SP1 Compiler Update for the Windows SDK 7.1
            \endlist
        \li Windows SDK 7 with Visual Studio 2008
        \li MinGW or \l{TDM-GCC} with g++ version 4.6 or higher (not supported for all modules).
    \endlist

    For the most up to date information about QtWebKit dependencies,
    please refer to the \l{http://trac.webkit.org/wiki/BuildingQtOnWindows}{QtWebKit wiki for Windows}.

    \sa {Known Issues}
*/

/*!
    \page requirements-mac.html
    \title Qt for Mac OS X Requirements
    \ingroup installation
    \brief Setting up the Mac OS X environment for Qt.
    \previouspage General Qt Requirements

    Qt requires Xcode to be installed on the system. Xcode should be
    available on the Mac installation CD.

    \sa {Known Issues}
*/

/*!
    \page requirements-x11.html
    \title Qt for X11 Requirements
    \ingroup installation
    \brief Setting up the X11 environment for Qt.
    \previouspage General Qt Requirements

    \tableofcontents

    \section1 QtGui Dependencies

    \image x11_dependencies.png Qt for X11 Dependencies

    The QtGui module and the QtCore module, which provides the non-GUI features required
    by QtGui, depend on the libraries described in the following table. To build
    Qt from its source code, you will also need to install the development
    packages for these libraries for your system.

    \table 100%
    \header
    \li Name
    \li Library
    \li Notes
    \li Configuration options
    \li Minimum working version
    \row {id="OptionalColor"}
    \li XRender
    \li libXrender
    \li X Rendering Extension; used for anti-aliasing
    \li \tt{-xrender} or auto-detected
    \li 0.9.0
    \row {id="OptionalColor"}
    \li Xrandr
    \li libXrandr
    \li X Resize and Rotate Extension
    \li \tt{-xrandr} or auto-detected
    \li 1.0.2
    \row {id="OptionalColor"}
    \li Xcursor
    \li libXcursor
    \li X Cursor Extension
    \li \tt{-xcursor} or auto-detected
    \li 1.1.4
    \row {id="OptionalColor"}
    \li Xfixes
    \li libXfixes
    \li X Fixes Extension
    \li \tt{-xfixes} or auto-detected
    \li 3.0.0
    \row {id="OptionalColor"}
    \li Xinerama
    \li libXinerama
    \li Multi-head support
    \li \tt{-xinerama} or auto-detected
    \li 1.1.0

    \row {id="OptionalColor"}
    \li Fontconfig
    \li libfontconfig
    \li Font customization and configuration
    \li \tt{-fontconfig} or auto-detected
    \li 2.1
    \row {id="OptionalColor"}
    \li FreeType
    \li libfreetype
    \li Font engine
    \li
    \li 2.1.3

    \row {id="DefaultColor"}
    \li Xi
    \li libXi
    \li X11 Input Extensions
    \li \tt{-xinput} or auto-detected
    \li 1.3.0
    \row {id="DefaultColor"}
    \li Xt
    \li libXt
    \li Xt Intrinsics
    \li
    \li 0.99
    \row {id="DefaultColor"}
    \li Xext
    \li libXext
    \li X Extensions
    \li
    \li 6.4.3
    \row {id="DefaultColor"}
    \li X11
    \li libX11
    \li X11 Client-Side Library
    \li
    \li 6.2.1

    \row {id="SMColor"}
    \li SM
    \li libSM
    \li X Session Management
    \li \tt{-sm} or auto-detected
    \li 6.0.4
    \row {id="SMColor"}
    \li ICE
    \li libICE
    \li Inter-Client Exchange
    \li \tt{-sm} or auto-detected
    \li 6.3.5

    \row {id="GlibColor"}
    \li glib
    \li libglib-2.0
    \li Common event loop handling
    \li \tt{-glib} or auto-detected
    \li 2.8.3
    \row {id="PthreadColor"}
    \li pthread
    \li libpthread
    \li Multithreading
    \li
    \li 2.3.5
    \endtable

    \note You must compile with XRender support to get alpha transparency
    support for pixmaps and images.

    Development packages for these libraries contain header files that are used
    when building Qt from its source code. On Debian-based GNU/Linux systems,
    for example, we recommend that you install the following development
    packages:

    \list
    \li libfontconfig1-dev
    \li libfreetype6-dev
    \li libx11-dev
    \li libxcursor-dev
    \li libxext-dev
    \li libxfixes-dev
    \li libxft-dev
    \li libxi-dev
    \li libxrandr-dev
    \li libxrender-dev
    \endlist

    Some of these packages depend on others in this list, so installing one
    may cause others to be automatically installed. Other distributions may
    provide system packages with similar names.

    \section1 OpenGL Dependencies

    The configure script will autodetect if OpenGL headers and libraries are
    installed on your system, and if so, it will include the QtOpenGL module
    in the Qt library.

    If your OpenGL headers or libraries are placed in a non-standard directory,
    you may need to change the \c QMAKE_INCDIR_OPENGL and/or
    \c QMAKE_LIBDIR_OPENGL in the config file for your system.

    The QGL documentation assumes that you are familiar with OpenGL
    programming. If you're new to the subject a good starting point is
    \l{http://www.opengl.org/}.

    \section1 Multimedia Dependencies

    As described in the \l{Multimedia Overview}, Qt Multimedia uses the GStreamer multimedia
    framework as the backend for audio and video playback on Linux. The minimum required
    version of GStreamer is 0.10.

    To build Qt Multimedia, you need the GStreamer library, base plugins, and development
    files for your system. The package names for GStreamer vary between Linux
    distributions; try searching for \c gstreamer or \c libgstreamer in your
    distribution's package repository to find suitable packages.

    \section1 QtWebKit Dependencies

    QtWebKit depends on some extra development tools in addition to those required for the rest of Qt.

    \note These dependencies are only needed if you use a source version of Qt.
          They are not required when using a prebuilt library.

    \list
        \li gperf
        \li bison
        \li flex (v2.5.33 or later)
        \li sqlite (development version)
        \li fontconfig (development version)
        \li xrender (development version)
        \li gstreamer (development version)
    \endlist

    These should be available in most major Linux distributions, but the exact install instructions will vary.

    For the most up to date information about QtWebKit dependencies, please refer to the \l{http://trac.webkit.org/wiki/BuildingQtOnLinux}{QtWebKit wiki for Linux}

    \sa {Known Issues}
*/

/*!
    \page requirements-wince.html
    \title Qt for Windows CE Requirements
    \ingroup installation
    \brief Setting up the Windows CE environment for Qt.
    \previouspage General Qt Requirements

    Qt is known to work with Visual Studio 2005/2008/2010 and the following SDKs for
    Windows CE development on Windows XP and Windows Vista:

    \list
        \li  Windows CE 5.0 Standard SDK for ARM, X86, and MIPS
        \li  Windows CE 6.0 SDKs for ARM generated using the defaults found in
            Platform Builder
        \li  Windows Mobile 5.0 (\e{Pocket PC}, \e{Smartphone} and
            \e{Pocket PC with Phone} editions)
        \li  Windows Mobile 6.0 (\e{Standard}, \e{Classic} and
            \e{Professional} editions)
    \endlist

    Below is a list of links to download the SDKs:

    \list
        \li \l{http://www.microsoft.com/downloads/details.aspx?familyid=fa1a3d66-3f61-4ddc-9510-ae450e2318c3&amp;displaylang=en}
            {Windows CE 5 Standard SDK}
        \li  \l{http://www.microsoft.com/downloads/details.aspx?familyid=83A52AF2-F524-4EC5-9155-717CBE5D25ED&amp;displaylang=en}
            {Windows Mobile 5 Pocket PC}
        \li  \l{http://www.microsoft.com/downloads/details.aspx?familyid=DC6C00CB-738A-4B97-8910-5CD29AB5F8D9&amp;displaylang=en}
            {Windows Mobile 5 Smartphone}
        \li  \l{http://www.microsoft.com/downloads/details.aspx?familyid=06111A3A-A651-4745-88EF-3D48091A390B&amp;displaylang=en}
            {Windows Mobile 6 Professional/Standard}
    \endlist

    \b{Note:}
    \table
        \row
            \li
            \list 1
                \li Currently, there is only compile support for Windows CE 5.0
                   Standard SDK for SH-4.
                \li There is currently no "out of the box" support for the
                   Windows CE Automotive or Portable Media SDKs from Microsoft.
            \endlist
    \endtable

    Device manufacturers may prefer to make their own customized version of
    Windows CE using Platform Builder. In order for Qt for Windows CE to
    support a custom SDK, a build specification needs to be created. More
    information on Windows CE Customization can be found
    \l{Windows CE - Working with Custom SDKs}{here}.

    \section3 Requirements
    \list
        \li Development environment:
        \list
            \li Microsoft Visual Studio 2005 (Standard Edition) or higher
            \li ActivePerl
        \endlist
        \li Footprint
        \list
            \li Lean configuration - 4.8 MB
            \li Full configuration - 8.4 MB
        \endlist
        \li Operating Systems
        \list
            \li Windows CE 5 or higher
            \li Windows Mobile 5 or higher
        \endlist
        \li Hardware Platform
        \list
            \li Supported on ARM, x86
            \li (Compiles on SH4 and MIPS)
        \endlist
    \endlist

        \sa {Known Issues}
*/

/*!
    \page requirements-embedded-linux.html
    \title Qt for Embedded Linux Requirements
    \ingroup installation
    \brief Setting up the Embedded Linux environment for Qt.
    \previouspage General Qt Requirements

    \sa {Known Issues}

    \section1 Building Qt for Embedded Linux with uclibc

    If you intend to include the QtWebKit module in your Qt build then you should
    use version \b{uClibc 0.9.29 or greater} as that is the earliest version
    with sufficient pthread support.

    \section1 QPA

    QPA (Lighthouse) should be used for new projects. QPA is a platform independent
    windowing architecture that allows easy porting of UI code between platforms.
    For further information about using QPA consult the README file in
    qtbase/src/plugins/platforms/<your platform>. For example, for the X graphical
    environment under Linux you will need to use the '-xcb' configure option and
    also read the file qtbase/src/plugins/platforms/xcb/README to see a list
    of required packages.

    \section1 Memory Requirements

    The memory and storage requirements for Qt for Embedded Linux depend on a
    an variety of different factors, including the target architecture and the
    features enabled in the Qt build.

    The \l{Fine-Tuning Features in Qt} document covers the process of configuring
    Qt builds to avoid the inclusion of unnecessary features.

    \section1 Additional X11 Libraries for QVFb

    The Virtual Framebuffer (QVFb) application requires the \c libxtst library
    in addition to the libraries used to build Qt for X11. This library
    enables the use of the Record extension to the X protocol to be used in
    applications.

*/

/*!
    \page configure-options.html
    \title Configuration Options for Qt
    \ingroup installation
    \brief Brief description of available options for building Qt.

    This page gives a brief description of the different options available when
    building Qt using the \c configure script or \c configure.exe binary.
    To build Qt using the default options, just call configure from the command
    line as shown below.

    When building on Linux, Mac OS X and Unix platforms:

    \c{./configure}

    On Windows, run the corresponding executable:

    \c{.\configure.exe}

    If you would like to customize your build, please use the options listed in
    the following tables. To see the full list of options, invoke the configure
    tool with the \c -help command line option.

    \section2 Cross platform options:

    \table
    \header \li Option  \li Description \li Note
    \row   \li \c {-buildkey} <key> \li Build the Qt library and plugins
    using the specified \li
    \row   \li \c {<key>} \li When the library loads plugins, it will only
    load those that have a matching <key>. \li
    \row   \li \c {-release} \li Compile and link Qt with debugging turned off. \li
    \row   \li \c {-debug} \li Compile and link Qt with debugging turned on.
    \li Default value.
    \row   \li \c {-debug-and-release} \li Compile and link two Qt libraries,
    with and without debugging turned on. \li This option denotes a default
    value and needs to be evaluated. If the evaluation succeeds, the
    feature is included.
    \row   \li \c {-opensource} \li Compile and link the Open-Source Edition
    of Qt. \li
    \row   \li \c {-commercial} \li Compile and link the Commercial Edition
    of Qt. \li
    \row   \li \c {-developer-build} \li Compile and link Qt with Qt developer
    options including auto-tests exporting) \li
    \row   \li \c {-shared} \li Create and use shared Qt libraries. \li Default
    value.
    \row   \li \c {-static} \li Create and use static Qt libraries. \li
    \row   \li \c {-ltcg} \li Use Link Time Code Generation. \li Apply to release
    builds only.
    \row   \li \c {-no-ltcg} \li Do not use Link Time Code Generation. \li Default
    value.
    \row   \li \c {-no-fast} \li Configure Qt normally by generating Makefiles for
    all project files. \li Default value.
    \row   \li \c {-fast} \li Configure Qt quickly by generating Makefiles only for
    library and subdirectory targets. \li All other Makefiles are created as
    wrappers which will in turn run qmake.
    \row   \li \c {-no-exceptions} \li Disable exceptions on platforms that support
    it. \li
    \row   \li \c {-exceptions} \li Enable exceptions on platforms that support it.
    \li Default value.
    \row   \li \c {-no-accessibility} \li Do not compile Windows Active
    Accessibility support. \li
    \row   \li \c {-accessibility} \li Compile Windows Active Accessibility
    support. \li Default value.
    \row   \li \c {-no-stl} \li Do not compile STL support. \li
    \row   \li \c {-stl} \li Compile STL support. \li Default value.
    \row   \li \c {-no-sql-<driver>} \li Disable SQL <driver> entirely, by default
    none are turned on. \li
    \row   \li \c {-qt-sql-<driver>} \li Enable a SQL <driver> in the Qt Library.
    \li
    \row   \li \c {-plugin-sql-<driver>} \li Enable SQL <driver> as a plugin to be
    linked to at run time. \li Available values for <driver>: mysql, psql,
    oci, odbc, tds, db2, sqlite, sqlite2, ibase. Drivers marked with a
    '+' during configure have been detected as available on this system.
    \row   \li \c {-system-sqlite} \li Use sqlite from the operating system. \li
    \row   \li \c {-no-opengl} \li Disables OpenGL functionality \li
    \row   \li \c {-opengl <api>} \li Enable OpenGL support with specified API
    version. \li Available values for <api>: desktop - Enable support for
    Desktop OpenGL (Default), es1 - Enable support for OpenGL ES Common
    Profile, es2 - Enable support for OpenGL ES 2.0.
    \row   \li \c {-platform <spec>} \li The operating system and compiler you
    are building on. \li The default value is %QMAKESPEC%.
    \row   \li \c {-xplatform <spec>} \li The operating system and compiler you
    are cross compiling for. \li See the README file for a list of supported
    operating systems and compilers.
    \row   \li \c {-qtnamespace <namespace>} \li Wraps all Qt library code in
    'namespace name {..} \li
    \row   \li \c {-qtlibinfix <infix>} \li Renames all Qt* libs to Qt*<infix>
    \li Do not use dots in <infix>
    \row   \li \c {-D <define>} \li Add an explicit define to the preprocessor.
    \li
    \row   \li \c {-I <includepath>} \li Add an explicit include path. \li
    \row   \li \c {-L <librarypath>} \li Add an explicit library path. \li
    \row   \li \c {-l <libraryname>} \li Add an explicit library name, residing
    in a librarypath. \li
    \row   \li \c {-help, -h, -?} \li Display this information. \li
    \endtable

    \section2 Third Party Libraries

    \table
    \header \li Option  \li Description \li Note
    \row   \li \c {-qt-zlib} \li Use the zlib bundled with Qt. \li
    \row   \li \c {-system-zlib} \li Use zlib from the operating system.
    \li See http://www.gzip.org/zlib
    \row   \li \c {-no-gif} \li Do not compile GIF reading support.
    \li This option denotes a default value and needs to be evaluated.
    If the evaluation succeeds, the feature is included.
    \row   \li \c {-qt-gif} \li Compile GIF reading support. \li See also
    src/gui/image/qgifhandler_p.h
    \row   \li \c {-no-libpng} \li Do not compile PNG support. \li
    \row   \li \c {-qt-libpng} \li Use the libpng bundled with Qt.
    \li This option denotes a default value and needs to be evaluated.
    If the evaluation succeeds, the feature is included.
    \row   \li \c {-system-libpng} \li Use libpng from the operating system.
    \li See http://www.libpng.org/pub/png
    \row   \li \c {-no-libmng} \li Do not compile MNG support. \li This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \li \c {-qt-libmng} \li Use the libmng bundled with Qt. \li
    \row   \li \c {-system-libmng} \li Use libmng from the operating system.
    \li See http://www.libmng.com
    \row   \li \c {-no-libtiff} \li Do not compile TIFF support. \li This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \li \c {-qt-libtiff} \li Use the libtiff bundled with Qt. \li
    \row   \li \c {-system-libtiff} \li Use libtiff from the operating system.
    \li See http://www.libtiff.org
    \row   \li \c {-no-libjpeg} \li Do not compile JPEG support. \li This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \li \c {-qt-libjpeg} \li Use the libjpeg bundled with Qt. \li
    \row   \li \c {-system-libjpeg} \li Use libjpeg from the operating system.
    \li See http://www.ijg.org. This option denotes a default value and
    needs to be evaluated. If the evaluation succeeds, the feature is
    included.
    \endtable

    \section2 Qt for Windows only:
    \table
    \header \li Option  \li Description \li Note
    \row   \li \c {-no-dsp} \li Do not generate VC++ .dsp files. \li
    \row   \li \c {-dsp} \li Generate VC++ .dsp files, only if spec "win32-msvc".
    \li Default value.
    \row   \li \c {-no-vcproj} \li Do not generate VC++ .vcproj files. \li
    \row   \li \c {-vcproj} \li Generate VC++ .vcproj files, only if platform
    "win32-msvc.net". \li Default value.
    \row   \li \c {-no-incredibuild-xge} \li Do not add IncrediBuild XGE distribution
    commands to custom build steps. \li
    \row   \li \c {-incredibuild-xge} \li Add IncrediBuild XGE distribution commands
    to custom build steps. This will distribute MOC and UIC steps, and other
    custom buildsteps which are added to the INCREDIBUILD_XGE variable.
    \li The IncrediBuild distribution commands are only added to Visual Studio
    projects. This option denotes a default value and needs to be evaluated.
    If the evaluation succeeds, the feature is included.
    \row   \li \c {-no-plugin-manifests} \li Do not embed manifests in plugins. \li
    \row   \li \c {-plugin-manifests} \li Embed manifests in plugins.
    \li Default value.
    \row   \li \c {-no-qmake} \li Do not compile qmake. \li
    \row   \li \c {-qmake} \li Compile qmake. \li Default value
    \row   \li \c {-dont-process} \li Do not generate Makefiles/Project files. This
    will override -no-fast if specified. \li
    \row   \li \c {-process} \li Generate Makefiles/Project files. \li Default value.
    \row   \li \c {-no-rtti} \li Do not compile runtime type information. \li
    \row   \li \c {-rtti} \li Compile runtime type information. \li Default value.
    \row   \li \c {-no-mmx} \li Do not compile with use of MMX instructions \li
    \row   \li \c {-mmx} \li Compile with use of MMX instructions \li This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \li \c {-no-3dnow} \li Do not compile with use of 3DNOW instructions \li
    \row   \li \c {-3dnow} \li Compile with use of 3DNOW instructions \li This
    option denotes a default value and needs to be evaluated. If the
    evaluation succeeds, the feature is included.
    \row   \li \c {-no-sse} \li Do not compile with use of SSE instructions \li
    \row   \li \c {-sse} \li Compile with use of SSE instructions \li This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \li \c {-no-sse2} \li Do not compile with use of SSE2 instructions \li
    \row   \li \c {-sse2} \li Compile with use of SSE2 instructions \li This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \li \c {-no-openssl} \li Do not compile in OpenSSL support \li
    \row   \li \c {-openssl} \li Compile in run-time OpenSSL support \li This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \li \c {-openssl-linked} \li Compile in linked OpenSSL support \li
    \row   \li \c {-no-dbus} \li Do not compile in D-Bus support \li
    \row   \li \c {-dbus} \li Compile in D-Bus support and load libdbus-1 dynamically.
    \li This option denotes a default value and needs to be evaluated.
    If the evaluation succeeds, the feature is included.
    \row   \li \c {-dbus-linked} \li Compile in D-Bus support and link to
    libdbus-1 \li
    \row   \li \c {-no-multimedia} \li Do not compile the multimedia module \li
    \row   \li \c {-multimedia} \li Compile in multimedia module \li Default value.
    \row   \li \c {-no-audio-backend} \li Do not compile in the platform audio
    backend into QtMultimedia \li
    \row   \li \c {-audio-backend} \li Compile in the platform audio backend into
    QtMultimedia \li This option denotes a default value and needs to be
    evaluated. If the evaluation succeeds, the feature is included.
    \row   \li \c {-no-webkit} \li Do not compile in the WebKit module \li
    \row   \li \c {-webkit} \li Compile in the WebKit module \li WebKit is built
    if a decent C++ compiler is used. This option denotes a default value
    and needs to be evaluated. If the evaluation succeeds, the feature is
    included.
    \row   \li \c {-webkit-debug} \li Compile in the WebKit module with debug
    symbols. \li
    \row   \li \c {-no-script} \li Do not build the QtScript module. \li
    \row   \li \c {-script} \li Build the QtScript module. \li This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \li \c {-no-scripttools} \li Do not build the QtScriptTools module. \li
    \row   \li \c {-scripttools} \li Build the QtScriptTools module. \li This
    option denotes a default value and needs to be evaluated. If the
    evaluation succeeds, the feature is included.
    \row   \li \c {-no-declarative} \li Do not build the declarative module \li
    \row   \li \c {-declarative} \li Build the declarative module \li This option
    denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \li \c {-no-declarative-debug} \li Do not build the declarative debugging
    support \li
    \row   \li \c {-declarative-debug} \li Build the declarative debugging support
    \li Default value.
    \row   \li \c {-arch <arch>} \li Specify an architecture. \li Available values for
    <arch>:  * windows, windowsce, boundschecker, generic.
    \row   \li \c {-no-style-<style>} \li Disable <style> entirely. \li
    \row   \li \c {-qt-style-<style>} \li Enable <style> in the Qt Library.
    \li Available styles: * windows, + windowsxp, + windowsvista,
    * plastique, * cleanlooks, * motif, * cde, windowsce, windowsmobile,
    s60
    \row   \li \c {-no-native-gestures} \li Do not use native gestures on Windows 7.
    \li
    \row   \li \c {-native-gestures} \li Use native gestures on Windows 7.
    \li Default value.
    \row   \li \c {-no-mp} \li Do not use multiple processors for compiling with MSVC
    \li Default value.
    \row   \li \c {-mp} \li Use multiple processors for compiling with MSVC (-MP) \li
    \row   \li \c {-loadconfig <config>} \li Run configure with the parameters from file
    configure_<config>.cache. \li
    \row   \li \c {-saveconfig <config>} \li Run configure and save the parameters in
    file configure_<config>.cache. \li
    \row   \li \c {-redo} \li Run configure with the same parameters as last time. \li
    \endtable

    \section2 Qt for Windows CE only:
    \table
    \header \li Option  \li Description \li Note
    \row   \li \c {-no-iwmmxt} \li Do not compile with use of IWMMXT instructions \li
    \row   \li \c {-iwmmxt} \li Do compile with use of IWMMXT instructions. \li This is
    for Qt for Windows CE on Arm only. This option denotes a default value and
    needs to be evaluated. If the evaluation succeeds, the feature is included.
    \row   \li \c {-no-crt} \li Do not add the C runtime to default deployment rules.
    \li Default value.
    \row   \li \c {-qt-crt} \li Qt identifies C runtime during project generation \li
    \row   \li \c {-crt <path>} \li Specify path to C runtime used for project
    generation. \li
    \row   \li \c {-no-cetest} \li Do not compile Windows CE remote test application \li
    \row   \li \c {-cetest} \li Compile Windows CE remote test application \li This
    option denotes a default value and needs to be evaluated. If the evaluation
    succeeds, the feature is included.
    \row   \li \c {-signature <file>} \li Use file for signing the target project \li
    \endtable
*/
